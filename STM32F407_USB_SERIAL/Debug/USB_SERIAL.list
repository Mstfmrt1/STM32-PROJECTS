
USB_SERIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ec  080070ec  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080070f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001c6c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d6c  20001d6c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e027  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028f1  00000000  00000000  0002e157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00030a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bfc  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec41  00000000  00000000  00054b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3e30  00000000  00000000  000637bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001275ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c88  00000000  00000000  00127640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007050 	.word	0x08007050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08007050 	.word	0x08007050

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b598      	push	{r3, r4, r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f9ae 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f814 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f87a 	bl	80005e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 f808 	bl	8006500 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CDC_Transmit_FS(data, strlen(data));
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <main+0x30>)
 80004f2:	681c      	ldr	r4, [r3, #0]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <main+0x30>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe65 	bl	80001c8 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29b      	uxth	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	4620      	mov	r0, r4
 8000506:	f006 f90d 	bl	8006724 <CDC_Transmit_FS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050a:	e7fe      	b.n	800050a <main+0x2e>
 800050c:	20000000 	.word	0x20000000

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f006 fd8e 	bl	8007040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <SystemClock_Config+0xc8>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <SystemClock_Config+0xc8>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <SystemClock_Config+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <SystemClock_Config+0xcc>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000584:	2348      	movs	r3, #72	; 0x48
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800058c:	2303      	movs	r3, #3
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0320 	add.w	r3, r7, #32
 8000594:	4618      	mov	r0, r3
 8000596:	f001 ff2d 	bl	80023f4 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a0:	f000 f8b0 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2102      	movs	r1, #2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 f98f 	bl	80028e4 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005cc:	f000 f89a 	bl	8000704 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <MX_GPIO_Init+0x114>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a3d      	ldr	r2, [pc, #244]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a36      	ldr	r2, [pc, #216]	; (80006f4 <MX_GPIO_Init+0x114>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <MX_GPIO_Init+0x114>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_GPIO_Init+0x114>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2101      	movs	r1, #1
 8000686:	481c      	ldr	r0, [pc, #112]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000688:	f000 fc1e 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000692:	481a      	ldr	r0, [pc, #104]	; (80006fc <MX_GPIO_Init+0x11c>)
 8000694:	f000 fc18 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000698:	2301      	movs	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4812      	ldr	r0, [pc, #72]	; (80006f8 <MX_GPIO_Init+0x118>)
 80006b0:	f000 fa6e 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b4:	2304      	movs	r3, #4
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_GPIO_Init+0x120>)
 80006c8:	f000 fa62 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_GPIO_Init+0x11c>)
 80006e6:	f000 fa53 	bl	8000b90 <HAL_GPIO_Init>

}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	; 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40020400 	.word	0x40020400

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 f9dc 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 80007ac:	f000 f89a 	bl	80008e4 <HAL_IncTick>


  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <OTG_FS_IRQHandler+0x10>)
 80007ba:	f000 fcee 	bl	800119a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20001640 	.word	0x20001640

080007c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f2:	490e      	ldr	r1, [pc, #56]	; (800082c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000808:	4c0b      	ldr	r4, [pc, #44]	; (8000838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000816:	f7ff ffd7 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f006 fbdf 	bl	8006fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081e:	f7ff fe5d 	bl	80004dc <main>
  bx  lr    
 8000822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000830:	080070f4 	.word	0x080070f4
  ldr r2, =_sbss
 8000834:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000838:	20001d6c 	.word	0x20001d6c

0800083c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_Init+0x40>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_Init+0x40>)
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x40>)
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f94f 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff4c 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023c00 	.word	0x40023c00

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f967 	bl	8000b76 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f92f 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2000000c 	.word	0x2000000c
 8000908:	2000015c 	.word	0x2000015c

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	2000015c 	.word	0x2000015c

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000000c 	.word	0x2000000c

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e16b      	b.n	8000e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 815a 	bne.w	8000e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d005      	beq.n	8000be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d130      	bne.n	8000c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	f003 0201 	and.w	r2, r3, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d017      	beq.n	8000c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	69b9      	ldr	r1, [r7, #24]
 8000cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0203 	and.w	r2, r3, #3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80b4 	beq.w	8000e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d32:	4a5b      	ldr	r2, [pc, #364]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_GPIO_Init+0x314>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a51      	ldr	r2, [pc, #324]	; (8000ea8 <HAL_GPIO_Init+0x318>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x222>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a50      	ldr	r2, [pc, #320]	; (8000eac <HAL_GPIO_Init+0x31c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x21e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <HAL_GPIO_Init+0x320>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x21a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x216>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4d      	ldr	r2, [pc, #308]	; (8000eb8 <HAL_GPIO_Init+0x328>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x212>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x32c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x20e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x20a>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00e      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	e00c      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000d9e:	2306      	movs	r3, #6
 8000da0:	e00a      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e008      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000da6:	2304      	movs	r3, #4
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e004      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000db6:	2300      	movs	r3, #0
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	f002 0203 	and.w	r2, r2, #3
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4093      	lsls	r3, r2
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	4935      	ldr	r1, [pc, #212]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dfa:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	f67f ae90 	bls.w	8000bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40013c00 	.word	0x40013c00

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efc:	b08f      	sub	sp, #60	; 0x3c
 8000efe:	af0a      	add	r7, sp, #40	; 0x28
 8000f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e10f      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f005 fd44 	bl	80069b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 ffd7 	bl	8002efe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	687e      	ldr	r6, [r7, #4]
 8000f58:	466d      	mov	r5, sp
 8000f5a:	f106 0410 	add.w	r4, r6, #16
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f6e:	1d33      	adds	r3, r6, #4
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f001 feae 	bl	8002cd4 <USB_CoreInit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0d0      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 ffc5 	bl	8002f20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e04a      	b.n	8001032 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	333d      	adds	r3, #61	; 0x3d
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	333c      	adds	r3, #60	; 0x3c
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3344      	adds	r3, #68	; 0x44
 8000fd8:	4602      	mov	r2, r0
 8000fda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3340      	adds	r3, #64	; 0x40
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3348      	adds	r3, #72	; 0x48
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	334c      	adds	r3, #76	; 0x4c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3354      	adds	r3, #84	; 0x54
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3af      	bcc.n	8000f9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e044      	b.n	80010cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3b5      	bcc.n	8001042 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	687e      	ldr	r6, [r7, #4]
 80010de:	466d      	mov	r5, sp
 80010e0:	f106 0410 	add.w	r4, r6, #16
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f4:	1d33      	adds	r3, r6, #4
 80010f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f001 ff5d 	bl	8002fb8 <USB_DevInit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00d      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f8ac 	bl	8004282 <USB_DevDisconnect>

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001134 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_PCD_Start+0x1c>
 800114c:	2302      	movs	r3, #2
 800114e:	e020      	b.n	8001192 <HAL_PCD_Start+0x5e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2b01      	cmp	r3, #1
 800115e:	d109      	bne.n	8001174 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001164:	2b01      	cmp	r3, #1
 8001166:	d005      	beq.n	8001174 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f001 feaf 	bl	8002edc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f85c 	bl	8004240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119a:	b590      	push	{r4, r7, lr}
 800119c:	b08d      	sub	sp, #52	; 0x34
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 f91a 	bl	80043ea <USB_GetMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f040 848a 	bne.w	8001ad2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 f87e 	bl	80042c4 <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8480 	beq.w	8001ad0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 f86b 	bl	80042c4 <USB_ReadInterrupts>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d107      	bne.n	8001208 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f002 0202 	and.w	r2, r2, #2
 8001206:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 f859 	bl	80042c4 <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b10      	cmp	r3, #16
 800121a:	d161      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0210 	bic.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f003 020f 	and.w	r2, r3, #15
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	0c5b      	lsrs	r3, r3, #17
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	2b02      	cmp	r3, #2
 8001256:	d124      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d035      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800126e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	6a38      	ldr	r0, [r7, #32]
 8001278:	f002 fe90 	bl	8003f9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129a:	441a      	add	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	621a      	str	r2, [r3, #32]
 80012a0:	e016      	b.n	80012d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	0c5b      	lsrs	r3, r3, #17
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d110      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012b4:	2208      	movs	r2, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	6a38      	ldr	r0, [r7, #32]
 80012ba:	f002 fe6f 	bl	8003f9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 ffed 	bl	80042c4 <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f4:	f040 80a7 	bne.w	8001446 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fff2 	bl	80042ea <USB_ReadDevAllOutEpInterrupt>
 8001306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001308:	e099      	b.n	800143e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 808e 	beq.w	8001432 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f003 f816 	bl	8004352 <USB_ReadDevOutEPInterrupt>
 8001326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	2301      	movs	r3, #1
 8001342:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fec2 	bl	80020d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001362:	461a      	mov	r2, r3
 8001364:	2308      	movs	r3, #8
 8001366:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 ff98 	bl	80022a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2310      	movs	r3, #16
 800138a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d030      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d109      	bne.n	80013b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2200      	movs	r2, #0
 80013d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f005 fbed 	bl	8006bc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2302      	movs	r3, #2
 80013f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140e:	461a      	mov	r2, r3
 8001410:	2320      	movs	r3, #32
 8001412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142a:	461a      	mov	r2, r3
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	3301      	adds	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f af62 	bne.w	800130a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ff3a 	bl	80042c4 <USB_ReadInterrupts>
 8001450:	4603      	mov	r3, r0
 8001452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800145a:	f040 80db 	bne.w	8001614 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 ff5b 	bl	800431e <USB_ReadDevAllInEpInterrupt>
 8001468:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800146e:	e0cd      	b.n	800160c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80c2 	beq.w	8001600 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 ff81 	bl	800438e <USB_ReadDevInEPInterrupt>
 800148c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d057      	beq.n	8001548 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	2201      	movs	r2, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69f9      	ldr	r1, [r7, #28]
 80014b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014b8:	4013      	ands	r3, r2
 80014ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c8:	461a      	mov	r2, r3
 80014ca:	2301      	movs	r3, #1
 80014cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d132      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	334c      	adds	r3, #76	; 0x4c
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4403      	add	r3, r0
 80014f6:	3348      	adds	r3, #72	; 0x48
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4419      	add	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	334c      	adds	r3, #76	; 0x4c
 800150c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	2b00      	cmp	r3, #0
 8001512:	d113      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	3354      	adds	r3, #84	; 0x54
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001534:	461a      	mov	r2, r3
 8001536:	2101      	movs	r1, #1
 8001538:	f002 ff88 	bl	800444c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f005 fab7 	bl	8006ab6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155e:	461a      	mov	r2, r3
 8001560:	2308      	movs	r3, #8
 8001562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157a:	461a      	mov	r2, r3
 800157c:	2310      	movs	r3, #16
 800157e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001596:	461a      	mov	r2, r3
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a8:	6a38      	ldr	r0, [r7, #32]
 80015aa:	f001 fe69 	bl	8003280 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	3338      	adds	r3, #56	; 0x38
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	78db      	ldrb	r3, [r3, #3]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f005 fb04 	bl	8006be4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2302      	movs	r3, #2
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fcdb 	bl	8001fb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f af2e 	bne.w	8001470 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 fe53 	bl	80042c4 <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001628:	d122      	bne.n	8001670 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fec2 	bl	80023dc <HAL_PCDEx_LPM_Callback>
 8001658:	e002      	b.n	8001660 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f005 faa2 	bl	8006ba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800166e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f002 fe25 	bl	80042c4 <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001684:	d112      	bne.n	80016ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f005 fa5e 	bl	8006b58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016aa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fe07 	bl	80042c4 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c0:	f040 80b7 	bne.w	8001832 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fdce 	bl	8003280 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e8:	e046      	b.n	8001778 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f6:	461a      	mov	r2, r3
 80016f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	0151      	lsls	r1, r2, #5
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	440a      	add	r2, r1
 8001714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800171c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172a:	461a      	mov	r2, r3
 800172c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001730:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	0151      	lsls	r1, r2, #5
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	440a      	add	r2, r1
 8001748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	0151      	lsls	r1, r2, #5
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	440a      	add	r2, r1
 8001768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800176c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001770:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	3301      	adds	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	429a      	cmp	r2, r3
 8001780:	d3b3      	bcc.n	80016ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001794:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ae:	f043 030b 	orr.w	r3, r3, #11
 80017b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f043 030b 	orr.w	r3, r3, #11
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	e015      	b.n	80017f8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f2:	f043 030b 	orr.w	r3, r3, #11
 80017f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001806:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800180a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800181c:	461a      	mov	r2, r3
 800181e:	f002 fe15 	bl	800444c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fd44 	bl	80042c4 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d124      	bne.n	8001892 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fdda 	bl	8004406 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fd8f 	bl	800337a <USB_GetDevSpeed>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	f001 fa28 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 800186c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f001 fa8e 	bl	8002d98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f005 f942 	bl	8006b06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fd14 	bl	80042c4 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d10a      	bne.n	80018bc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f005 f91f 	bl	8006aea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f002 0208 	and.w	r2, r2, #8
 80018ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fcff 	bl	80042c4 <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b80      	cmp	r3, #128	; 0x80
 80018ce:	d122      	bne.n	8001916 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	e014      	b.n	800190c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fb27 	bl	8001f54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001912:	429a      	cmp	r2, r3
 8001914:	d3e5      	bcc.n	80018e2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fcd2 	bl	80042c4 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800192a:	d13b      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e02b      	b.n	800198a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3340      	adds	r3, #64	; 0x40
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d115      	bne.n	8001984 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001958:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	da12      	bge.n	8001984 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	333f      	adds	r3, #63	; 0x3f
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fae8 	bl	8001f54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3301      	adds	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	429a      	cmp	r2, r3
 8001992:	d3ce      	bcc.n	8001932 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fc8b 	bl	80042c4 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b8:	d155      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ba:	2301      	movs	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e045      	b.n	8001a4c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12e      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da2b      	bge.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d121      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6053      	str	r3, [r2, #4]
            break;
 8001a44:	e007      	b.n	8001a56 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3b4      	bcc.n	80019c0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fc2a 	bl	80042c4 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d10a      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 f8c3 	bl	8006c08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fc14 	bl	80042c4 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d115      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f005 f8b3 	bl	8006c24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e000      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ad0:	bf00      	nop
    }
  }
}
 8001ad2:	3734      	adds	r7, #52	; 0x34
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_SetAddress+0x1a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e013      	b.n	8001b1a <HAL_PCD_SetAddress+0x42>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fb72 	bl	80041f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	460b      	mov	r3, r1
 8001b36:	803b      	strh	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da0f      	bge.n	8001b68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3338      	adds	r3, #56	; 0x38
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	705a      	strb	r2, [r3, #1]
 8001b66:	e00f      	b.n	8001b88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b94:	883a      	ldrh	r2, [r7, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	78ba      	ldrb	r2, [r7, #2]
 8001b9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bb2:	78bb      	ldrb	r3, [r7, #2]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d102      	bne.n	8001bbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_EP_Open+0xaa>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00e      	b.n	8001bea <HAL_PCD_EP_Open+0xc8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fbf2 	bl	80033c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001be8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da0f      	bge.n	8001c26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3338      	adds	r3, #56	; 0x38
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	705a      	strb	r2, [r3, #1]
 8001c24:	e00f      	b.n	8001c46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_EP_Close+0x6e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00e      	b.n	8001c7e <HAL_PCD_EP_Close+0x8c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fc30 	bl	80034d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	460b      	mov	r3, r1
 8001c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d102      	bne.n	8001ce2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	f001 ff0f 	bl	8003b1c <USB_EP0StartXfer>
 8001cfe:	e008      	b.n	8001d12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6979      	ldr	r1, [r7, #20]
 8001d0e:	f001 fcbd 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3338      	adds	r3, #56	; 0x38
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	f001 fead 	bl	8003b1c <USB_EP0StartXfer>
 8001dc2:	e008      	b.n	8001dd6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	f001 fc5b 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d901      	bls.n	8001dfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e050      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da0f      	bge.n	8001e26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	3338      	adds	r3, #56	; 0x38
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
 8001e24:	e00d      	b.n	8001e42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_EP_SetStall+0x82>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e01e      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0xc0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 f8eb 	bl	800404c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e90:	461a      	mov	r2, r3
 8001e92:	f002 fadb 	bl	800444c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0f      	bge.n	8001eee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00f      	b.n	8001f0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_PCD_EP_ClrStall+0x86>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e00e      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 f8f3 	bl	8004128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0c      	bge.n	8001f82 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3338      	adds	r3, #56	; 0x38
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e00c      	b.n	8001f9c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 ff12 	bl	8003dcc <USB_EPStopXfer>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b08a      	sub	sp, #40	; 0x28
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	3338      	adds	r3, #56	; 0x38
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06c      	b.n	80020c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3303      	adds	r3, #3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002012:	e02b      	b.n	800206c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	429a      	cmp	r2, r3
 8002028:	d902      	bls.n	8002030 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3303      	adds	r3, #3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002048:	b2db      	uxtb	r3, r3
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f001 ff66 	bl	8003f20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	441a      	add	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	b29b      	uxth	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d809      	bhi.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208a:	429a      	cmp	r2, r3
 800208c:	d203      	bcs.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1be      	bne.n	8002014 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d811      	bhi.n	80020c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	2201      	movs	r2, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c2:	4013      	ands	r3, r2
 80020c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d17b      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a61      	ldr	r2, [pc, #388]	; (8002298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	f240 80b9 	bls.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b3 	beq.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002138:	6093      	str	r3, [r2, #8]
 800213a:	e0a7      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002152:	461a      	mov	r2, r3
 8002154:	2320      	movs	r3, #32
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e098      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 8093 	bne.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d90f      	bls.n	800218e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218a:	6093      	str	r3, [r2, #8]
 800218c:	e07e      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d114      	bne.n	80021f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d8:	461a      	mov	r2, r3
 80021da:	2101      	movs	r1, #1
 80021dc:	f002 f936 	bl	800444c <USB_EP0_OutStart>
 80021e0:	e006      	b.n	80021f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	441a      	add	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4619      	mov	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 fc42 	bl	8006a80 <HAL_PCD_DataOutStageCallback>
 80021fc:	e046      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d124      	bne.n	8002250 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002222:	6093      	str	r3, [r2, #8]
 8002224:	e032      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	2320      	movs	r3, #32
 8002240:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f004 fc19 	bl	8006a80 <HAL_PCD_DataOutStageCallback>
 800224e:	e01d      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d114      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f002 f8e6 	bl	800444c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f004 fbfa 	bl	8006a80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	4f54300a 	.word	0x4f54300a
 800229c:	4f54310a 	.word	0x4f54310a

080022a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	333c      	adds	r3, #60	; 0x3c
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d90e      	bls.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f004 fbb1 	bl	8006a5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d90c      	bls.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002314:	461a      	mov	r2, r3
 8002316:	2101      	movs	r1, #1
 8002318:	f002 f898 	bl	800444c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	4f54300a 	.word	0x4f54300a

0800232c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
 8002338:	4613      	mov	r3, r2
 800233a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234a:	883b      	ldrh	r3, [r7, #0]
 800234c:	0419      	lsls	r1, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	430a      	orrs	r2, r1
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
 8002358:	e028      	b.n	80023ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e00d      	b.n	800238a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3340      	adds	r3, #64	; 0x40
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	429a      	cmp	r2, r3
 8002392:	d3ec      	bcc.n	800236e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002394:	883b      	ldrh	r3, [r7, #0]
 8002396:	0418      	lsls	r0, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	3b01      	subs	r3, #1
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4302      	orrs	r2, r0
 80023a4:	3340      	adds	r3, #64	; 0x40
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e267      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e242      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x74>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fa2e 	bl	800090c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fa2a 	bl	800090c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e207      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa1a 	bl	800090c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fa16 	bl	800090c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1f3      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe f9cf 	bl	800090c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe f9cb 	bl	800090c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a8      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe f9ae 	bl	800090c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe f9aa 	bl	800090c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e187      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d036      	beq.n	800264c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x248>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe f98e 	bl	800090c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe f98a 	bl	800090c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e167      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x200>
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x248>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe f977 	bl	800090c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e00e      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe f973 	bl	800090c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d907      	bls.n	8002640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e150      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002634:	40023800 	.word	0x40023800
 8002638:	42470000 	.word	0x42470000
 800263c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ea      	bne.n	8002622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8097 	beq.w	8002788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b7a      	ldr	r3, [pc, #488]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7fe f933 	bl	800090c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe f92f 	bl	800090c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e10c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x2ea>
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x30c>
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe f8f4 	bl	800090c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe f8f0 	bl	800090c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0cb      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <HAL_RCC_OscConfig+0x334>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe f8de 	bl	800090c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe f8da 	bl	800090c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0b5      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a1 	beq.w	80028d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d05c      	beq.n	8002858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d141      	bne.n	800282a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe f8ae 	bl	800090c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe f8aa 	bl	800090c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e087      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	491b      	ldr	r1, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe f883 	bl	800090c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe f87f 	bl	800090c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e05c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x416>
 8002828:	e054      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x478>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe f86c 	bl	800090c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe f868 	bl	800090c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e045      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
 8002856:	e03d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e038      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d028      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d121      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fd ff9a 	bl	800090c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fd ff96 	bl	800090c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fefa 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080070d4 	.word	0x080070d4
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20000008 	.word	0x20000008

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b094      	sub	sp, #80	; 0x50
 8002ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
 8002abc:	2300      	movs	r3, #0
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac8:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	f200 80e1 	bhi.w	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae2:	e0db      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ae8:	e0db      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e0d8      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	6139      	str	r1, [r7, #16]
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b54:	4659      	mov	r1, fp
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4651      	mov	r1, sl
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4651      	mov	r1, sl
 8002b64:	ebb2 0801 	subs.w	r8, r2, r1
 8002b68:	4659      	mov	r1, fp
 8002b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb49 0303 	adc.w	r3, r9, r3
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	024b      	lsls	r3, r1, #9
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bac:	4621      	mov	r1, r4
 8002bae:	024a      	lsls	r2, r1, #9
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc0:	f7fd fb0a 	bl	80001d8 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e058      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0159      	lsls	r1, r3, #5
 8002bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfa:	0150      	lsls	r0, r2, #5
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4641      	mov	r1, r8
 8002c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c20:	ebb2 040a 	subs.w	r4, r2, sl
 8002c24:	eb63 050b 	sbc.w	r5, r3, fp
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	00eb      	lsls	r3, r5, #3
 8002c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb45 0303 	adc.w	r3, r5, r3
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c56:	4629      	mov	r1, r5
 8002c58:	028b      	lsls	r3, r1, #10
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c60:	4621      	mov	r1, r4
 8002c62:	028a      	lsls	r2, r1, #10
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	61fa      	str	r2, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	f7fd fab0 	bl	80001d8 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	f107 001c 	add.w	r0, r7, #28
 8002ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d122      	bne.n	8002d32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fbee 	bl	8004508 <USB_CoreReset>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e01a      	b.n	8002d68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f001 fbe2 	bl	8004508 <USB_CoreReset>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
 8002d5a:	e005      	b.n	8002d68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10b      	bne.n	8002d86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f043 0206 	orr.w	r2, r3, #6
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d92:	b004      	add	sp, #16
 8002d94:	4770      	bx	lr
	...

08002d98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d165      	bne.n	8002e78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a41      	ldr	r2, [pc, #260]	; (8002eb4 <USB_SetTurnaroundTime+0x11c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d906      	bls.n	8002dc2 <USB_SetTurnaroundTime+0x2a>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <USB_SetTurnaroundTime+0x120>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d202      	bcs.n	8002dc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e062      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a3c      	ldr	r2, [pc, #240]	; (8002eb8 <USB_SetTurnaroundTime+0x120>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d306      	bcc.n	8002dd8 <USB_SetTurnaroundTime+0x40>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a3b      	ldr	r2, [pc, #236]	; (8002ebc <USB_SetTurnaroundTime+0x124>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d202      	bcs.n	8002dd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002dd2:	230e      	movs	r3, #14
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e057      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a38      	ldr	r2, [pc, #224]	; (8002ebc <USB_SetTurnaroundTime+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d306      	bcc.n	8002dee <USB_SetTurnaroundTime+0x56>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <USB_SetTurnaroundTime+0x128>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d202      	bcs.n	8002dee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002de8:	230d      	movs	r3, #13
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e04c      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <USB_SetTurnaroundTime+0x128>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d306      	bcc.n	8002e04 <USB_SetTurnaroundTime+0x6c>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <USB_SetTurnaroundTime+0x12c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e041      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <USB_SetTurnaroundTime+0x12c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d906      	bls.n	8002e1a <USB_SetTurnaroundTime+0x82>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a2e      	ldr	r2, [pc, #184]	; (8002ec8 <USB_SetTurnaroundTime+0x130>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d802      	bhi.n	8002e1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e14:	230b      	movs	r3, #11
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e036      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <USB_SetTurnaroundTime+0x130>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d906      	bls.n	8002e30 <USB_SetTurnaroundTime+0x98>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <USB_SetTurnaroundTime+0x134>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d802      	bhi.n	8002e30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e2a:	230a      	movs	r3, #10
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e02b      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <USB_SetTurnaroundTime+0x134>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d906      	bls.n	8002e46 <USB_SetTurnaroundTime+0xae>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <USB_SetTurnaroundTime+0x138>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d202      	bcs.n	8002e46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e40:	2309      	movs	r3, #9
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e020      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a21      	ldr	r2, [pc, #132]	; (8002ed0 <USB_SetTurnaroundTime+0x138>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d306      	bcc.n	8002e5c <USB_SetTurnaroundTime+0xc4>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4a20      	ldr	r2, [pc, #128]	; (8002ed4 <USB_SetTurnaroundTime+0x13c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d802      	bhi.n	8002e5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e56:	2308      	movs	r3, #8
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e015      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <USB_SetTurnaroundTime+0x13c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d906      	bls.n	8002e72 <USB_SetTurnaroundTime+0xda>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <USB_SetTurnaroundTime+0x140>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d202      	bcs.n	8002e72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e6c:	2307      	movs	r3, #7
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e72:	2306      	movs	r3, #6
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e007      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e001      	b.n	8002e88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e84:	2309      	movs	r3, #9
 8002e86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	00d8acbf 	.word	0x00d8acbf
 8002eb8:	00e4e1c0 	.word	0x00e4e1c0
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	01067380 	.word	0x01067380
 8002ec4:	011a499f 	.word	0x011a499f
 8002ec8:	01312cff 	.word	0x01312cff
 8002ecc:	014ca43f 	.word	0x014ca43f
 8002ed0:	016e3600 	.word	0x016e3600
 8002ed4:	01a6ab1f 	.word	0x01a6ab1f
 8002ed8:	01e84800 	.word	0x01e84800

08002edc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d115      	bne.n	8002f6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fd fce8 	bl	8000924 <HAL_Delay>
      ms++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f001 fa45 	bl	80043ea <USB_GetMode>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d01e      	beq.n	8002fa4 <USB_SetCurrentMode+0x84>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b31      	cmp	r3, #49	; 0x31
 8002f6a:	d9f0      	bls.n	8002f4e <USB_SetCurrentMode+0x2e>
 8002f6c:	e01a      	b.n	8002fa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7fd fccf 	bl	8000924 <HAL_Delay>
      ms++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 fa2c 	bl	80043ea <USB_GetMode>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <USB_SetCurrentMode+0x84>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b31      	cmp	r3, #49	; 0x31
 8002f9c:	d9f0      	bls.n	8002f80 <USB_SetCurrentMode+0x60>
 8002f9e:	e001      	b.n	8002fa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e005      	b.n	8002fb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b32      	cmp	r3, #50	; 0x32
 8002fa8:	d101      	bne.n	8002fae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fb8:	b084      	sub	sp, #16
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	e009      	b.n	8002fec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3340      	adds	r3, #64	; 0x40
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b0e      	cmp	r3, #14
 8002ff0:	d9f2      	bls.n	8002fd8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11c      	bne.n	8003032 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
 8003030:	e00b      	b.n	800304a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003050:	461a      	mov	r2, r3
 8003052:	2300      	movs	r3, #0
 8003054:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305c:	4619      	mov	r1, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003064:	461a      	mov	r2, r3
 8003066:	680b      	ldr	r3, [r1, #0]
 8003068:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f965 	bl	8003348 <USB_SetDevSpeed>
 800307e:	e008      	b.n	8003092 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003080:	2101      	movs	r1, #1
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f960 	bl	8003348 <USB_SetDevSpeed>
 8003088:	e003      	b.n	8003092 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800308a:	2103      	movs	r1, #3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f95b 	bl	8003348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003092:	2110      	movs	r1, #16
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8f3 	bl	8003280 <USB_FlushTxFifo>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f91f 	bl	80032e8 <USB_FlushRxFifo>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	461a      	mov	r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e043      	b.n	8003166 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030f4:	d118      	bne.n	8003128 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	461a      	mov	r2, r3
 800310a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e013      	b.n	800313a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e008      	b.n	800313a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003134:	461a      	mov	r2, r3
 8003136:	2300      	movs	r3, #0
 8003138:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800315e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3301      	adds	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	429a      	cmp	r2, r3
 800316c:	d3b7      	bcc.n	80030de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e043      	b.n	80031fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318a:	d118      	bne.n	80031be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e013      	b.n	80031d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b4:	461a      	mov	r2, r3
 80031b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	e008      	b.n	80031d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	3301      	adds	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d3b7      	bcc.n	8003174 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003216:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003224:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <USB_DevInit+0x2c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f043 0208 	orr.w	r2, r3, #8
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003278:	b004      	add	sp, #16
 800327a:	4770      	bx	lr
 800327c:	803c3800 	.word	0x803c3800

08003280 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3301      	adds	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <USB_FlushTxFifo+0x64>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e01b      	b.n	80032d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	daf2      	bge.n	800328e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <USB_FlushTxFifo+0x64>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e006      	b.n	80032d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d0f0      	beq.n	80032b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	00030d40 	.word	0x00030d40

080032e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a11      	ldr	r2, [pc, #68]	; (8003344 <USB_FlushRxFifo+0x5c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e018      	b.n	8003338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	daf2      	bge.n	80032f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2210      	movs	r2, #16
 8003316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <USB_FlushRxFifo+0x5c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e006      	b.n	8003338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b10      	cmp	r3, #16
 8003334:	d0f0      	beq.n	8003318 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	00030d40 	.word	0x00030d40

08003348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0306 	and.w	r3, r3, #6
 8003392:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
 800339e:	e00a      	b.n	80033b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d002      	beq.n	80033ac <USB_GetDevSpeed+0x32>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d102      	bne.n	80033b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033ac:	2302      	movs	r3, #2
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e001      	b.n	80033b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033b2:	230f      	movs	r3, #15
 80033b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d13a      	bne.n	8003456 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fe:	4313      	orrs	r3, r2
 8003400:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d155      	bne.n	80034c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	791b      	ldrb	r3, [r3, #4]
 8003432:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003434:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	059b      	lsls	r3, r3, #22
 800343a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800343c:	4313      	orrs	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e036      	b.n	80034c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11a      	bne.n	80034c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034aa:	430b      	orrs	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d161      	bne.n	80035b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003506:	d11f      	bne.n	8003548 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003526:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003568:	4013      	ands	r3, r2
 800356a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4013      	ands	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	4619      	mov	r1, r3
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <USB_DeactivateEndpoint+0x1b0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
 80035b2:	e060      	b.n	8003676 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ca:	d11f      	bne.n	800360c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800360a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	43db      	mvns	r3, r3
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800362c:	4013      	ands	r3, r2
 800362e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	43db      	mvns	r3, r3
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003650:	4013      	ands	r3, r2
 8003652:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0159      	lsls	r1, r3, #5
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	440b      	add	r3, r1
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	4619      	mov	r1, r3
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <USB_DeactivateEndpoint+0x1b4>)
 8003672:	4013      	ands	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	ec337800 	.word	0xec337800
 8003688:	eff37800 	.word	0xeff37800

0800368c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 815c 	bne.w	8003966 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d132      	bne.n	800371c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003714:	0cdb      	lsrs	r3, r3, #19
 8003716:	04db      	lsls	r3, r3, #19
 8003718:	6113      	str	r3, [r2, #16]
 800371a:	e074      	b.n	8003806 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003736:	0cdb      	lsrs	r3, r3, #19
 8003738:	04db      	lsls	r3, r3, #19
 800373a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800375a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800375e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6999      	ldr	r1, [r3, #24]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	440b      	add	r3, r1
 8003778:	1e59      	subs	r1, r3, #1
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003784:	4b9d      	ldr	r3, [pc, #628]	; (80039fc <USB_EPStartXfer+0x370>)
 8003786:	400b      	ands	r3, r1
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	0148      	lsls	r0, r1, #5
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	4401      	add	r1, r0
 8003790:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	0148      	lsls	r0, r1, #5
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	4401      	add	r1, r0
 80037b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	791b      	ldrb	r3, [r3, #4]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d11f      	bne.n	8003806 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003804:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d14b      	bne.n	80038a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d128      	bne.n	8003882 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d110      	bne.n	8003862 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e00f      	b.n	8003882 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e133      	b.n	8003b0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d015      	beq.n	80038f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 811b 	beq.w	8003b0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	69f9      	ldr	r1, [r7, #28]
 80038ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f2:	4313      	orrs	r3, r2
 80038f4:	634b      	str	r3, [r1, #52]	; 0x34
 80038f6:	e109      	b.n	8003b0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	440a      	add	r2, r1
 800391e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e00f      	b.n	800394a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	440a      	add	r2, r1
 8003940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	b298      	uxth	r0, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fade 	bl	8003f20 <USB_WritePacket>
 8003964:	e0d2      	b.n	8003b0c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003980:	0cdb      	lsrs	r3, r3, #19
 8003982:	04db      	lsls	r3, r3, #19
 8003984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	440a      	add	r2, r1
 800399c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	0148      	lsls	r0, r1, #5
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	4401      	add	r1, r0
 80039d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f6:	6113      	str	r3, [r2, #16]
 80039f8:	e03a      	b.n	8003a70 <USB_EPStartXfer+0x3e4>
 80039fa:	bf00      	nop
 80039fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	8afa      	ldrh	r2, [r7, #22]
 8003a1c:	fb03 f202 	mul.w	r2, r3, r2
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	04d9      	lsls	r1, r3, #19
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <USB_EPStartXfer+0x48c>)
 8003a38:	400b      	ands	r3, r1
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	0148      	lsls	r0, r1, #5
 8003a3e:	69f9      	ldr	r1, [r7, #28]
 8003a40:	4401      	add	r1, r0
 8003a42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a46:	4313      	orrs	r3, r2
 8003a48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	0148      	lsls	r0, r1, #5
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	4401      	add	r1, r0
 8003a68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d10d      	bne.n	8003a92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6919      	ldr	r1, [r3, #16]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	460a      	mov	r2, r1
 8003a90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	791b      	ldrb	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d128      	bne.n	8003aec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d110      	bne.n	8003acc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e00f      	b.n	8003aec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	1ff80000 	.word	0x1ff80000

08003b1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	f040 80ce 	bne.w	8003cda <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d132      	bne.n	8003bac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba4:	0cdb      	lsrs	r3, r3, #19
 8003ba6:	04db      	lsls	r3, r3, #19
 8003ba8:	6113      	str	r3, [r2, #16]
 8003baa:	e04e      	b.n	8003c4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	0cdb      	lsrs	r3, r3, #19
 8003bc8:	04db      	lsls	r3, r3, #19
 8003bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d903      	bls.n	8003c04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	0148      	lsls	r0, r1, #5
 8003c3e:	6979      	ldr	r1, [r7, #20]
 8003c40:	4401      	add	r1, r0
 8003c42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c46:	4313      	orrs	r3, r2
 8003c48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d11e      	bne.n	8003c8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e097      	b.n	8003dbe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8083 	beq.w	8003dbe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	2101      	movs	r1, #1
 8003cca:	fa01 f303 	lsl.w	r3, r1, r3
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	634b      	str	r3, [r1, #52]	; 0x34
 8003cd8:	e071      	b.n	8003dbe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf4:	0cdb      	lsrs	r3, r3, #19
 8003cf6:	04db      	lsls	r3, r3, #19
 8003cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6c:	6939      	ldr	r1, [r7, #16]
 8003d6e:	0148      	lsls	r0, r1, #5
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	4401      	add	r1, r0
 8003d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d10d      	bne.n	8003d9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6919      	ldr	r1, [r3, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d14a      	bne.n	8003e80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e02:	f040 8086 	bne.w	8003f12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d902      	bls.n	8003e64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
          break;
 8003e62:	e056      	b.n	8003f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e7c:	d0e7      	beq.n	8003e4e <USB_EPStopXfer+0x82>
 8003e7e:	e048      	b.n	8003f12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e98:	d13b      	bne.n	8003f12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d902      	bls.n	8003ef8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ef6:	e00c      	b.n	8003f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f10:	d0e7      	beq.n	8003ee2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	460b      	mov	r3, r1
 8003f30:	71fb      	strb	r3, [r7, #7]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d123      	bne.n	8003f8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	3303      	adds	r3, #3
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	e018      	b.n	8003f86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	031a      	lsls	r2, r3, #12
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	461a      	mov	r2, r3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3301      	adds	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3e2      	bcc.n	8003f54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3724      	adds	r7, #36	; 0x24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b08b      	sub	sp, #44	; 0x2c
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	e014      	b.n	8003ff2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	3301      	adds	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	3301      	adds	r3, #1
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3e6      	bcc.n	8003fc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ffa:	8bfb      	ldrh	r3, [r7, #30]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01e      	beq.n	800403e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400a:	461a      	mov	r2, r3
 800400c:	f107 0310 	add.w	r3, r7, #16
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	b2da      	uxtb	r2, r3
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	701a      	strb	r2, [r3, #0]
      i++;
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	3301      	adds	r3, #1
 800402a:	623b      	str	r3, [r7, #32]
      pDest++;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	3301      	adds	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004032:	8bfb      	ldrh	r3, [r7, #30]
 8004034:	3b01      	subs	r3, #1
 8004036:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004038:	8bfb      	ldrh	r3, [r7, #30]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ea      	bne.n	8004014 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004040:	4618      	mov	r0, r3
 8004042:	372c      	adds	r7, #44	; 0x2c
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d12c      	bne.n	80040c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db12      	blt.n	80040a0 <USB_EPSetStall+0x54>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00f      	beq.n	80040a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800409e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e02b      	b.n	800411a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db12      	blt.n	80040fa <USB_EPSetStall+0xae>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00f      	beq.n	80040fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d128      	bne.n	8004196 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004162:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	791b      	ldrb	r3, [r3, #4]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d003      	beq.n	8004174 <USB_EPClearStall+0x4c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d138      	bne.n	80041e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e027      	b.n	80041e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	791b      	ldrb	r3, [r3, #4]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d003      	beq.n	80041c6 <USB_EPClearStall+0x9e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d10f      	bne.n	80041e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004212:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004216:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426e:	f023 0302 	bic.w	r3, r3, #2
 8004272:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800429c:	f023 0303 	bic.w	r3, r3, #3
 80042a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4013      	ands	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0c1b      	lsrs	r3, r3, #16
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	b29b      	uxth	r3, r3
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004380:	68bb      	ldr	r3, [r7, #8]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	01db      	lsls	r3, r3, #7
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043dc:	68bb      	ldr	r3, [r7, #8]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004424:	f023 0307 	bic.w	r3, r3, #7
 8004428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	460b      	mov	r3, r1
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	333c      	adds	r3, #60	; 0x3c
 8004462:	3304      	adds	r3, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4a26      	ldr	r2, [pc, #152]	; (8004504 <USB_EP0_OutStart+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d90a      	bls.n	8004486 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800447c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004480:	d101      	bne.n	8004486 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e037      	b.n	80044f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	2300      	movs	r3, #0
 8004490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f043 0318 	orr.w	r3, r3, #24
 80044b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044ce:	7afb      	ldrb	r3, [r7, #11]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d10f      	bne.n	80044f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	4f54300a 	.word	0x4f54300a

08004508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <USB_CoreReset+0x64>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e01b      	b.n	800455e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	daf2      	bge.n	8004514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <USB_CoreReset+0x64>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e006      	b.n	800455e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d0f0      	beq.n	800453e <USB_CoreReset+0x36>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	00030d40 	.word	0x00030d40

08004570 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800457c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004580:	f002 fce8 	bl	8006f54 <USBD_static_malloc>
 8004584:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	32b0      	adds	r2, #176	; 0xb0
 8004596:	2100      	movs	r1, #0
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800459c:	2302      	movs	r3, #2
 800459e:	e0d4      	b.n	800474a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80045a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80045a4:	2100      	movs	r1, #0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f002 fd4a 	bl	8007040 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	32b0      	adds	r2, #176	; 0xb0
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	32b0      	adds	r2, #176	; 0xb0
 80045c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7c1b      	ldrb	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d138      	bne.n	800464a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045d8:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <USBD_CDC_Init+0x1e4>)
 80045da:	7819      	ldrb	r1, [r3, #0]
 80045dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e0:	2202      	movs	r2, #2
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f002 fb93 	bl	8006d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045e8:	4b5a      	ldr	r3, [pc, #360]	; (8004754 <USBD_CDC_Init+0x1e4>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	3324      	adds	r3, #36	; 0x24
 80045fe:	2201      	movs	r2, #1
 8004600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004604:	7819      	ldrb	r1, [r3, #0]
 8004606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800460a:	2202      	movs	r2, #2
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f002 fb7e 	bl	8006d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800462a:	2201      	movs	r2, #1
 800462c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800462e:	4b4b      	ldr	r3, [pc, #300]	; (800475c <USBD_CDC_Init+0x1ec>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3326      	adds	r3, #38	; 0x26
 8004644:	2210      	movs	r2, #16
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e035      	b.n	80046b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800464a:	4b42      	ldr	r3, [pc, #264]	; (8004754 <USBD_CDC_Init+0x1e4>)
 800464c:	7819      	ldrb	r1, [r3, #0]
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	2202      	movs	r2, #2
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f002 fb5b 	bl	8006d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004658:	4b3e      	ldr	r3, [pc, #248]	; (8004754 <USBD_CDC_Init+0x1e4>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3324      	adds	r3, #36	; 0x24
 800466e:	2201      	movs	r2, #1
 8004670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004674:	7819      	ldrb	r1, [r3, #0]
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	2202      	movs	r2, #2
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f002 fb47 	bl	8006d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004698:	2201      	movs	r2, #1
 800469a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800469c:	4b2f      	ldr	r3, [pc, #188]	; (800475c <USBD_CDC_Init+0x1ec>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3326      	adds	r3, #38	; 0x26
 80046b2:	2210      	movs	r2, #16
 80046b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <USBD_CDC_Init+0x1ec>)
 80046b8:	7819      	ldrb	r1, [r3, #0]
 80046ba:	2308      	movs	r3, #8
 80046bc:	2203      	movs	r2, #3
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f002 fb25 	bl	8006d0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <USBD_CDC_Init+0x1ec>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	f003 020f 	and.w	r2, r3, #15
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3324      	adds	r3, #36	; 0x24
 80046da:	2201      	movs	r2, #1
 80046dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	33b0      	adds	r3, #176	; 0xb0
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004714:	2302      	movs	r3, #2
 8004716:	e018      	b.n	800474a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7c1b      	ldrb	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004722:	7819      	ldrb	r1, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800472a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f002 fbdc 	bl	8006eec <USBD_LL_PrepareReceive>
 8004734:	e008      	b.n	8004748 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <USBD_CDC_Init+0x1e8>)
 8004738:	7819      	ldrb	r1, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f002 fbd2 	bl	8006eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000097 	.word	0x20000097
 8004758:	20000098 	.word	0x20000098
 800475c:	20000099 	.word	0x20000099

08004760 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <USBD_CDC_DeInit+0xf8>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f002 faf1 	bl	8006d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004778:	4b37      	ldr	r3, [pc, #220]	; (8004858 <USBD_CDC_DeInit+0xf8>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	3324      	adds	r3, #36	; 0x24
 800478e:	2200      	movs	r2, #0
 8004790:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004792:	4b32      	ldr	r3, [pc, #200]	; (800485c <USBD_CDC_DeInit+0xfc>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f002 fade 	bl	8006d5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800479e:	4b2f      	ldr	r3, [pc, #188]	; (800485c <USBD_CDC_DeInit+0xfc>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047b6:	2200      	movs	r2, #0
 80047b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <USBD_CDC_DeInit+0x100>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f002 faca 	bl	8006d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <USBD_CDC_DeInit+0x100>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3324      	adds	r3, #36	; 0x24
 80047dc:	2200      	movs	r2, #0
 80047de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <USBD_CDC_DeInit+0x100>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3326      	adds	r3, #38	; 0x26
 80047f6:	2200      	movs	r2, #0
 80047f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	32b0      	adds	r2, #176	; 0xb0
 8004804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01f      	beq.n	800484c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	33b0      	adds	r3, #176	; 0xb0
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	32b0      	adds	r2, #176	; 0xb0
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	4618      	mov	r0, r3
 8004830:	f002 fb9e 	bl	8006f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	32b0      	adds	r2, #176	; 0xb0
 800483e:	2100      	movs	r1, #0
 8004840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000097 	.word	0x20000097
 800485c:	20000098 	.word	0x20000098
 8004860:	20000099 	.word	0x20000099

08004864 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	32b0      	adds	r2, #176	; 0xb0
 8004878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	e0bf      	b.n	8004a14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800489c:	2b00      	cmp	r3, #0
 800489e:	d050      	beq.n	8004942 <USBD_CDC_Setup+0xde>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f040 80af 	bne.w	8004a04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	88db      	ldrh	r3, [r3, #6]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03a      	beq.n	8004924 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	da1b      	bge.n	80048f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	33b0      	adds	r3, #176	; 0xb0
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80048ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	88d2      	ldrh	r2, [r2, #6]
 80048d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	88db      	ldrh	r3, [r3, #6]
 80048da:	2b07      	cmp	r3, #7
 80048dc:	bf28      	it	cs
 80048de:	2307      	movcs	r3, #7
 80048e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	89fa      	ldrh	r2, [r7, #14]
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 fd89 	bl	8006400 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048ee:	e090      	b.n	8004a12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	785a      	ldrb	r2, [r3, #1]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	88db      	ldrh	r3, [r3, #6]
 80048fe:	2b3f      	cmp	r3, #63	; 0x3f
 8004900:	d803      	bhi.n	800490a <USBD_CDC_Setup+0xa6>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	88db      	ldrh	r3, [r3, #6]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	e000      	b.n	800490c <USBD_CDC_Setup+0xa8>
 800490a:	2240      	movs	r2, #64	; 0x40
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004912:	6939      	ldr	r1, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800491a:	461a      	mov	r2, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 fd9b 	bl	8006458 <USBD_CtlPrepareRx>
      break;
 8004922:	e076      	b.n	8004a12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	33b0      	adds	r3, #176	; 0xb0
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	7850      	ldrb	r0, [r2, #1]
 800493a:	2200      	movs	r2, #0
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	4798      	blx	r3
      break;
 8004940:	e067      	b.n	8004a12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	2b0b      	cmp	r3, #11
 8004948:	d851      	bhi.n	80049ee <USBD_CDC_Setup+0x18a>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <USBD_CDC_Setup+0xec>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004981 	.word	0x08004981
 8004954:	080049fd 	.word	0x080049fd
 8004958:	080049ef 	.word	0x080049ef
 800495c:	080049ef 	.word	0x080049ef
 8004960:	080049ef 	.word	0x080049ef
 8004964:	080049ef 	.word	0x080049ef
 8004968:	080049ef 	.word	0x080049ef
 800496c:	080049ef 	.word	0x080049ef
 8004970:	080049ef 	.word	0x080049ef
 8004974:	080049ef 	.word	0x080049ef
 8004978:	080049ab 	.word	0x080049ab
 800497c:	080049d5 	.word	0x080049d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b03      	cmp	r3, #3
 800498a:	d107      	bne.n	800499c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800498c:	f107 030a 	add.w	r3, r7, #10
 8004990:	2202      	movs	r2, #2
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fd33 	bl	8006400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800499a:	e032      	b.n	8004a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 fcbd 	bl	800631e <USBD_CtlError>
            ret = USBD_FAIL;
 80049a4:	2303      	movs	r3, #3
 80049a6:	75fb      	strb	r3, [r7, #23]
          break;
 80049a8:	e02b      	b.n	8004a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80049b6:	f107 030d 	add.w	r3, r7, #13
 80049ba:	2201      	movs	r2, #1
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 fd1e 	bl	8006400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049c4:	e01d      	b.n	8004a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f001 fca8 	bl	800631e <USBD_CtlError>
            ret = USBD_FAIL;
 80049ce:	2303      	movs	r3, #3
 80049d0:	75fb      	strb	r3, [r7, #23]
          break;
 80049d2:	e016      	b.n	8004a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d00f      	beq.n	8004a00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 fc9b 	bl	800631e <USBD_CtlError>
            ret = USBD_FAIL;
 80049e8:	2303      	movs	r3, #3
 80049ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049ec:	e008      	b.n	8004a00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 fc94 	bl	800631e <USBD_CtlError>
          ret = USBD_FAIL;
 80049f6:	2303      	movs	r3, #3
 80049f8:	75fb      	strb	r3, [r7, #23]
          break;
 80049fa:	e002      	b.n	8004a02 <USBD_CDC_Setup+0x19e>
          break;
 80049fc:	bf00      	nop
 80049fe:	e008      	b.n	8004a12 <USBD_CDC_Setup+0x1ae>
          break;
 8004a00:	bf00      	nop
      }
      break;
 8004a02:	e006      	b.n	8004a12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 fc89 	bl	800631e <USBD_CtlError>
      ret = USBD_FAIL;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	32b0      	adds	r2, #176	; 0xb0
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e065      	b.n	8004b12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	32b0      	adds	r2, #176	; 0xb0
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3318      	adds	r3, #24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02f      	beq.n	8004ad0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3318      	adds	r3, #24
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 010f 	and.w	r1, r3, #15
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	440b      	add	r3, r1
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4403      	add	r3, r0
 8004a98:	3348      	adds	r3, #72	; 0x48
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d112      	bne.n	8004ad0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	3318      	adds	r3, #24
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ac2:	78f9      	ldrb	r1, [r7, #3]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f002 f9ee 	bl	8006eaa <USBD_LL_Transmit>
 8004ace:	e01f      	b.n	8004b10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	33b0      	adds	r3, #176	; 0xb0
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	33b0      	adds	r3, #176	; 0xb0
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	32b0      	adds	r2, #176	; 0xb0
 8004b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	32b0      	adds	r2, #176	; 0xb0
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e01a      	b.n	8004b82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f002 f9ec 	bl	8006f2e <USBD_LL_GetRxDataSize>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	33b0      	adds	r3, #176	; 0xb0
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	32b0      	adds	r2, #176	; 0xb0
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e025      	b.n	8004bf8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	33b0      	adds	r3, #176	; 0xb0
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01a      	beq.n	8004bf6 <USBD_CDC_EP0_RxReady+0x6c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bc6:	2bff      	cmp	r3, #255	; 0xff
 8004bc8:	d015      	beq.n	8004bf6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	33b0      	adds	r3, #176	; 0xb0
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004be2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bea:	b292      	uxth	r2, r2
 8004bec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c08:	2182      	movs	r1, #130	; 0x82
 8004c0a:	4818      	ldr	r0, [pc, #96]	; (8004c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c0c:	f000 fd4f 	bl	80056ae <USBD_GetEpDesc>
 8004c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c12:	2101      	movs	r1, #1
 8004c14:	4815      	ldr	r0, [pc, #84]	; (8004c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c16:	f000 fd4a 	bl	80056ae <USBD_GetEpDesc>
 8004c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c1c:	2181      	movs	r1, #129	; 0x81
 8004c1e:	4813      	ldr	r0, [pc, #76]	; (8004c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c20:	f000 fd45 	bl	80056ae <USBD_GetEpDesc>
 8004c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c40:	711a      	strb	r2, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c54:	711a      	strb	r2, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2243      	movs	r2, #67	; 0x43
 8004c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000054 	.word	0x20000054

08004c70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c78:	2182      	movs	r1, #130	; 0x82
 8004c7a:	4818      	ldr	r0, [pc, #96]	; (8004cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c7c:	f000 fd17 	bl	80056ae <USBD_GetEpDesc>
 8004c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c82:	2101      	movs	r1, #1
 8004c84:	4815      	ldr	r0, [pc, #84]	; (8004cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c86:	f000 fd12 	bl	80056ae <USBD_GetEpDesc>
 8004c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c8c:	2181      	movs	r1, #129	; 0x81
 8004c8e:	4813      	ldr	r0, [pc, #76]	; (8004cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c90:	f000 fd0d 	bl	80056ae <USBD_GetEpDesc>
 8004c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2200      	movs	r2, #0
 8004cac:	711a      	strb	r2, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f042 0202 	orr.w	r2, r2, #2
 8004cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	711a      	strb	r2, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f042 0202 	orr.w	r2, r2, #2
 8004cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2243      	movs	r2, #67	; 0x43
 8004cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cd0:	4b02      	ldr	r3, [pc, #8]	; (8004cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000054 	.word	0x20000054

08004ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ce8:	2182      	movs	r1, #130	; 0x82
 8004cea:	4818      	ldr	r0, [pc, #96]	; (8004d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cec:	f000 fcdf 	bl	80056ae <USBD_GetEpDesc>
 8004cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4815      	ldr	r0, [pc, #84]	; (8004d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cf6:	f000 fcda 	bl	80056ae <USBD_GetEpDesc>
 8004cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cfc:	2181      	movs	r1, #129	; 0x81
 8004cfe:	4813      	ldr	r0, [pc, #76]	; (8004d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d00:	f000 fcd5 	bl	80056ae <USBD_GetEpDesc>
 8004d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2210      	movs	r2, #16
 8004d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d20:	711a      	strb	r2, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d006      	beq.n	8004d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d34:	711a      	strb	r2, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2243      	movs	r2, #67	; 0x43
 8004d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000054 	.word	0x20000054

08004d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d5e:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000010 	.word	0x20000010

08004d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e009      	b.n	8004d98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	33b0      	adds	r3, #176	; 0xb0
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	32b0      	adds	r2, #176	; 0xb0
 8004dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dbe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e008      	b.n	8004ddc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	32b0      	adds	r2, #176	; 0xb0
 8004dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e004      	b.n	8004e16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	32b0      	adds	r2, #176	; 0xb0
 8004e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	32b0      	adds	r2, #176	; 0xb0
 8004e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e025      	b.n	8004ea2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11f      	bne.n	8004ea0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <USBD_CDC_TransmitPacket+0x88>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4403      	add	r3, r0
 8004e82:	3318      	adds	r3, #24
 8004e84:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <USBD_CDC_TransmitPacket+0x88>)
 8004e88:	7819      	ldrb	r1, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f002 f807 	bl	8006eaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000097 	.word	0x20000097

08004eb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	32b0      	adds	r2, #176	; 0xb0
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e018      	b.n	8004f10 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7c1b      	ldrb	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <USBD_CDC_ReceivePacket+0x68>)
 8004ee8:	7819      	ldrb	r1, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 fff9 	bl	8006eec <USBD_LL_PrepareReceive>
 8004efa:	e008      	b.n	8004f0e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <USBD_CDC_ReceivePacket+0x68>)
 8004efe:	7819      	ldrb	r1, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 ffef 	bl	8006eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000098 	.word	0x20000098

08004f1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e01f      	b.n	8004f74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	79fa      	ldrb	r2, [r7, #7]
 8004f66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f001 fe69 	bl	8006c40 <USBD_LL_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e025      	b.n	8004fe0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	32ae      	adds	r2, #174	; 0xae
 8004fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00f      	beq.n	8004fd0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	32ae      	adds	r2, #174	; 0xae
 8004fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f107 020e 	add.w	r2, r7, #14
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
 8004fc8:	4602      	mov	r2, r0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fe71 	bl	8006cd8 <USBD_LL_Start>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005008:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	4611      	mov	r1, r2
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	4611      	mov	r1, r2
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005074:	2303      	movs	r3, #3
 8005076:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f001 f908 	bl	80062aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80050a8:	461a      	mov	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d01a      	beq.n	80050f4 <USBD_LL_SetupStage+0x72>
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d822      	bhi.n	8005108 <USBD_LL_SetupStage+0x86>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <USBD_LL_SetupStage+0x4a>
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d00a      	beq.n	80050e0 <USBD_LL_SetupStage+0x5e>
 80050ca:	e01d      	b.n	8005108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fb5f 	bl	8005798 <USBD_StdDevReq>
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
      break;
 80050de:	e020      	b.n	8005122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fbc7 	bl	800587c <USBD_StdItfReq>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
      break;
 80050f2:	e016      	b.n	8005122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fc29 	bl	8005954 <USBD_StdEPReq>
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
      break;
 8005106:	e00c      	b.n	8005122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800510e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fe3e 	bl	8006d98 <USBD_LL_StallEP>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
      break;
 8005120:	bf00      	nop
  }

  return ret;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	460b      	mov	r3, r1
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d16e      	bne.n	8005222 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800514a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005152:	2b03      	cmp	r3, #3
 8005154:	f040 8098 	bne.w	8005288 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d913      	bls.n	800518c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	1ad2      	subs	r2, r2, r3
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4293      	cmp	r3, r2
 800517c:	bf28      	it	cs
 800517e:	4613      	movcs	r3, r2
 8005180:	461a      	mov	r2, r3
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f001 f984 	bl	8006492 <USBD_CtlContinueRx>
 800518a:	e07d      	b.n	8005288 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2b02      	cmp	r3, #2
 8005198:	d014      	beq.n	80051c4 <USBD_LL_DataOutStage+0x98>
 800519a:	2b02      	cmp	r3, #2
 800519c:	d81d      	bhi.n	80051da <USBD_LL_DataOutStage+0xae>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <USBD_LL_DataOutStage+0x7c>
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d003      	beq.n	80051ae <USBD_LL_DataOutStage+0x82>
 80051a6:	e018      	b.n	80051da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	75bb      	strb	r3, [r7, #22]
            break;
 80051ac:	e018      	b.n	80051e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fa5e 	bl	800567a <USBD_CoreFindIF>
 80051be:	4603      	mov	r3, r0
 80051c0:	75bb      	strb	r3, [r7, #22]
            break;
 80051c2:	e00d      	b.n	80051e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa60 	bl	8005694 <USBD_CoreFindEP>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75bb      	strb	r3, [r7, #22]
            break;
 80051d8:	e002      	b.n	80051e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	75bb      	strb	r3, [r7, #22]
            break;
 80051de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051e0:	7dbb      	ldrb	r3, [r7, #22]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d119      	bne.n	800521a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d113      	bne.n	800521a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051f2:	7dba      	ldrb	r2, [r7, #22]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	32ae      	adds	r2, #174	; 0xae
 80051f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005202:	7dba      	ldrb	r2, [r7, #22]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800520a:	7dba      	ldrb	r2, [r7, #22]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	32ae      	adds	r2, #174	; 0xae
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f001 f94a 	bl	80064b4 <USBD_CtlSendStatus>
 8005220:	e032      	b.n	8005288 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa31 	bl	8005694 <USBD_CoreFindEP>
 8005232:	4603      	mov	r3, r0
 8005234:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005236:	7dbb      	ldrb	r3, [r7, #22]
 8005238:	2bff      	cmp	r3, #255	; 0xff
 800523a:	d025      	beq.n	8005288 <USBD_LL_DataOutStage+0x15c>
 800523c:	7dbb      	ldrb	r3, [r7, #22]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d122      	bne.n	8005288 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d117      	bne.n	800527e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800524e:	7dba      	ldrb	r2, [r7, #22]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	32ae      	adds	r2, #174	; 0xae
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00f      	beq.n	800527e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800525e:	7dba      	ldrb	r2, [r7, #22]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005266:	7dba      	ldrb	r2, [r7, #22]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	32ae      	adds	r2, #174	; 0xae
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	7afa      	ldrb	r2, [r7, #11]
 8005274:	4611      	mov	r1, r2
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	4798      	blx	r3
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	e000      	b.n	800528a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	460b      	mov	r3, r1
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d16f      	bne.n	8005386 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3314      	adds	r3, #20
 80052aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d15a      	bne.n	800536c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d914      	bls.n	80052ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f001 f8ac 	bl	8006436 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052de:	2300      	movs	r3, #0
 80052e0:	2200      	movs	r2, #0
 80052e2:	2100      	movs	r1, #0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f001 fe01 	bl	8006eec <USBD_LL_PrepareReceive>
 80052ea:	e03f      	b.n	800536c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d11c      	bne.n	8005332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005300:	429a      	cmp	r2, r3
 8005302:	d316      	bcc.n	8005332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800530e:	429a      	cmp	r2, r3
 8005310:	d20f      	bcs.n	8005332 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f001 f88d 	bl	8006436 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005324:	2300      	movs	r3, #0
 8005326:	2200      	movs	r2, #0
 8005328:	2100      	movs	r1, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 fdde 	bl	8006eec <USBD_LL_PrepareReceive>
 8005330:	e01c      	b.n	800536c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d10f      	bne.n	800535e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f001 fd19 	bl	8006d98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f001 f8b7 	bl	80064da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03a      	beq.n	80053ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff fe42 	bl	8005000 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005384:	e032      	b.n	80053ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800538c:	b2db      	uxtb	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f97f 	bl	8005694 <USBD_CoreFindEP>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2bff      	cmp	r3, #255	; 0xff
 800539e:	d025      	beq.n	80053ec <USBD_LL_DataInStage+0x15a>
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d122      	bne.n	80053ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d11c      	bne.n	80053ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80053b2:	7dfa      	ldrb	r2, [r7, #23]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	32ae      	adds	r2, #174	; 0xae
 80053b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d014      	beq.n	80053ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80053c2:	7dfa      	ldrb	r2, [r7, #23]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80053ca:	7dfa      	ldrb	r2, [r7, #23]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	32ae      	adds	r2, #174	; 0xae
 80053d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	7afa      	ldrb	r2, [r7, #11]
 80053d8:	4611      	mov	r1, r2
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	4798      	blx	r3
 80053de:	4603      	mov	r3, r0
 80053e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053e2:	7dbb      	ldrb	r3, [r7, #22]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053e8:	7dbb      	ldrb	r3, [r7, #22]
 80053ea:	e000      	b.n	80053ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d014      	beq.n	800545c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	4611      	mov	r1, r2
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005458:	2303      	movs	r3, #3
 800545a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fc53 	bl	8006d0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2240      	movs	r2, #64	; 0x40
 8005474:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	2200      	movs	r2, #0
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 fc45 	bl	8006d0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	621a      	str	r2, [r3, #32]

  return ret;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2204      	movs	r2, #4
 80054d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d106      	bne.n	8005508 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005500:	b2da      	uxtb	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d110      	bne.n	800554c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	32ae      	adds	r2, #174	; 0xae
 800556c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	e01c      	b.n	80055b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b03      	cmp	r3, #3
 8005582:	d115      	bne.n	80055b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32ae      	adds	r2, #174	; 0xae
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32ae      	adds	r2, #174	; 0xae
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	4611      	mov	r1, r2
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	32ae      	adds	r2, #174	; 0xae
 80055d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055d8:	2303      	movs	r3, #3
 80055da:	e01c      	b.n	8005616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d115      	bne.n	8005614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	32ae      	adds	r2, #174	; 0xae
 80055f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	32ae      	adds	r2, #174	; 0xae
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	4611      	mov	r1, r2
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00e      	beq.n	8005670 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6852      	ldr	r2, [r2, #4]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	4611      	mov	r1, r2
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800566c:	2303      	movs	r3, #3
 800566e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80056a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	885b      	ldrh	r3, [r3, #2]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d920      	bls.n	8005718 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056de:	e013      	b.n	8005708 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056e0:	f107 030a 	add.w	r3, r7, #10
 80056e4:	4619      	mov	r1, r3
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	f000 f81b 	bl	8005722 <USBD_GetNextDesc>
 80056ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d108      	bne.n	8005708 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	789b      	ldrb	r3, [r3, #2]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	429a      	cmp	r2, r3
 8005702:	d008      	beq.n	8005716 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	885b      	ldrh	r3, [r3, #2]
 800570c:	b29a      	uxth	r2, r3
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	429a      	cmp	r2, r3
 8005712:	d8e5      	bhi.n	80056e0 <USBD_GetEpDesc+0x32>
 8005714:	e000      	b.n	8005718 <USBD_GetEpDesc+0x6a>
          break;
 8005716:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005718:	693b      	ldr	r3, [r7, #16]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4413      	add	r3, r2
 800573c:	b29a      	uxth	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	3301      	adds	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	b21a      	sxth	r2, r3
 8005780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005784:	4313      	orrs	r3, r2
 8005786:	b21b      	sxth	r3, r3
 8005788:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800578a:	89fb      	ldrh	r3, [r7, #14]
}
 800578c:	4618      	mov	r0, r3
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d005      	beq.n	80057be <USBD_StdDevReq+0x26>
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d857      	bhi.n	8005866 <USBD_StdDevReq+0xce>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <USBD_StdDevReq+0x42>
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d153      	bne.n	8005866 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	32ae      	adds	r2, #174	; 0xae
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e04a      	b.n	8005870 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b09      	cmp	r3, #9
 80057e0:	d83b      	bhi.n	800585a <USBD_StdDevReq+0xc2>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <USBD_StdDevReq+0x50>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	08005851 	.word	0x08005851
 80057f0:	0800585b 	.word	0x0800585b
 80057f4:	08005847 	.word	0x08005847
 80057f8:	0800585b 	.word	0x0800585b
 80057fc:	0800581b 	.word	0x0800581b
 8005800:	08005811 	.word	0x08005811
 8005804:	0800585b 	.word	0x0800585b
 8005808:	08005833 	.word	0x08005833
 800580c:	08005825 	.word	0x08005825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa3c 	bl	8005c90 <USBD_GetDescriptor>
          break;
 8005818:	e024      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fba1 	bl	8005f64 <USBD_SetAddress>
          break;
 8005822:	e01f      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fbe0 	bl	8005fec <USBD_SetConfig>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]
          break;
 8005830:	e018      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fc83 	bl	8006140 <USBD_GetConfig>
          break;
 800583a:	e013      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fcb4 	bl	80061ac <USBD_GetStatus>
          break;
 8005844:	e00e      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fce3 	bl	8006214 <USBD_SetFeature>
          break;
 800584e:	e009      	b.n	8005864 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fd07 	bl	8006266 <USBD_ClrFeature>
          break;
 8005858:	e004      	b.n	8005864 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fd5e 	bl	800631e <USBD_CtlError>
          break;
 8005862:	bf00      	nop
      }
      break;
 8005864:	e004      	b.n	8005870 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fd58 	bl	800631e <USBD_CtlError>
      break;
 800586e:	bf00      	nop
  }

  return ret;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d005      	beq.n	80058a2 <USBD_StdItfReq+0x26>
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d852      	bhi.n	8005940 <USBD_StdItfReq+0xc4>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <USBD_StdItfReq+0x26>
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d14e      	bne.n	8005940 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d840      	bhi.n	8005932 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	889b      	ldrh	r3, [r3, #4]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d836      	bhi.n	8005928 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	889b      	ldrh	r3, [r3, #4]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff fed9 	bl	800567a <USBD_CoreFindIF>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2bff      	cmp	r3, #255	; 0xff
 80058d0:	d01d      	beq.n	800590e <USBD_StdItfReq+0x92>
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11a      	bne.n	800590e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058d8:	7bba      	ldrb	r2, [r7, #14]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00f      	beq.n	8005908 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058e8:	7bba      	ldrb	r2, [r7, #14]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058f0:	7bba      	ldrb	r2, [r7, #14]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	32ae      	adds	r2, #174	; 0xae
 80058f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005906:	e004      	b.n	8005912 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005908:	2303      	movs	r3, #3
 800590a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800590c:	e001      	b.n	8005912 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800590e:	2303      	movs	r3, #3
 8005910:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	88db      	ldrh	r3, [r3, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d110      	bne.n	800593c <USBD_StdItfReq+0xc0>
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10d      	bne.n	800593c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fdc7 	bl	80064b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005926:	e009      	b.n	800593c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fcf7 	bl	800631e <USBD_CtlError>
          break;
 8005930:	e004      	b.n	800593c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fcf2 	bl	800631e <USBD_CtlError>
          break;
 800593a:	e000      	b.n	800593e <USBD_StdItfReq+0xc2>
          break;
 800593c:	bf00      	nop
      }
      break;
 800593e:	e004      	b.n	800594a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fceb 	bl	800631e <USBD_CtlError>
      break;
 8005948:	bf00      	nop
  }

  return ret;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	889b      	ldrh	r3, [r3, #4]
 8005966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d007      	beq.n	8005984 <USBD_StdEPReq+0x30>
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	f200 817f 	bhi.w	8005c78 <USBD_StdEPReq+0x324>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d02a      	beq.n	80059d4 <USBD_StdEPReq+0x80>
 800597e:	2b20      	cmp	r3, #32
 8005980:	f040 817a 	bne.w	8005c78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fe83 	bl	8005694 <USBD_CoreFindEP>
 800598e:	4603      	mov	r3, r0
 8005990:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005992:	7b7b      	ldrb	r3, [r7, #13]
 8005994:	2bff      	cmp	r3, #255	; 0xff
 8005996:	f000 8174 	beq.w	8005c82 <USBD_StdEPReq+0x32e>
 800599a:	7b7b      	ldrb	r3, [r7, #13]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8170 	bne.w	8005c82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80059a2:	7b7a      	ldrb	r2, [r7, #13]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80059aa:	7b7a      	ldrb	r2, [r7, #13]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	32ae      	adds	r2, #174	; 0xae
 80059b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8163 	beq.w	8005c82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80059bc:	7b7a      	ldrb	r2, [r7, #13]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	32ae      	adds	r2, #174	; 0xae
 80059c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d2:	e156      	b.n	8005c82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d008      	beq.n	80059ee <USBD_StdEPReq+0x9a>
 80059dc:	2b03      	cmp	r3, #3
 80059de:	f300 8145 	bgt.w	8005c6c <USBD_StdEPReq+0x318>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 809b 	beq.w	8005b1e <USBD_StdEPReq+0x1ca>
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d03c      	beq.n	8005a66 <USBD_StdEPReq+0x112>
 80059ec:	e13e      	b.n	8005c6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d002      	beq.n	8005a00 <USBD_StdEPReq+0xac>
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d016      	beq.n	8005a2c <USBD_StdEPReq+0xd8>
 80059fe:	e02c      	b.n	8005a5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <USBD_StdEPReq+0xce>
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d00a      	beq.n	8005a22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f9c1 	bl	8006d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f9bd 	bl	8006d98 <USBD_LL_StallEP>
 8005a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a20:	e020      	b.n	8005a64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc7a 	bl	800631e <USBD_CtlError>
              break;
 8005a2a:	e01b      	b.n	8005a64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	885b      	ldrh	r3, [r3, #2]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10e      	bne.n	8005a52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <USBD_StdEPReq+0xfe>
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d008      	beq.n	8005a52 <USBD_StdEPReq+0xfe>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	88db      	ldrh	r3, [r3, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 f9a3 	bl	8006d98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fd2e 	bl	80064b4 <USBD_CtlSendStatus>

              break;
 8005a58:	e004      	b.n	8005a64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fc5e 	bl	800631e <USBD_CtlError>
              break;
 8005a62:	bf00      	nop
          }
          break;
 8005a64:	e107      	b.n	8005c76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d002      	beq.n	8005a78 <USBD_StdEPReq+0x124>
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d016      	beq.n	8005aa4 <USBD_StdEPReq+0x150>
 8005a76:	e04b      	b.n	8005b10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <USBD_StdEPReq+0x146>
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d00a      	beq.n	8005a9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a84:	7bbb      	ldrb	r3, [r7, #14]
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 f985 	bl	8006d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f981 	bl	8006d98 <USBD_LL_StallEP>
 8005a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a98:	e040      	b.n	8005b1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fc3e 	bl	800631e <USBD_CtlError>
              break;
 8005aa2:	e03b      	b.n	8005b1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	885b      	ldrh	r3, [r3, #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d136      	bne.n	8005b1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 f98b 	bl	8006dd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fcf7 	bl	80064b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fde2 	bl	8005694 <USBD_CoreFindEP>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ad4:	7b7b      	ldrb	r3, [r7, #13]
 8005ad6:	2bff      	cmp	r3, #255	; 0xff
 8005ad8:	d01f      	beq.n	8005b1a <USBD_StdEPReq+0x1c6>
 8005ada:	7b7b      	ldrb	r3, [r7, #13]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11c      	bne.n	8005b1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ae0:	7b7a      	ldrb	r2, [r7, #13]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ae8:	7b7a      	ldrb	r2, [r7, #13]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32ae      	adds	r2, #174	; 0xae
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d010      	beq.n	8005b1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005af8:	7b7a      	ldrb	r2, [r7, #13]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	32ae      	adds	r2, #174	; 0xae
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005b0e:	e004      	b.n	8005b1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fc03 	bl	800631e <USBD_CtlError>
              break;
 8005b18:	e000      	b.n	8005b1c <USBD_StdEPReq+0x1c8>
              break;
 8005b1a:	bf00      	nop
          }
          break;
 8005b1c:	e0ab      	b.n	8005c76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d002      	beq.n	8005b30 <USBD_StdEPReq+0x1dc>
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d032      	beq.n	8005b94 <USBD_StdEPReq+0x240>
 8005b2e:	e097      	b.n	8005c60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <USBD_StdEPReq+0x1f2>
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	2b80      	cmp	r3, #128	; 0x80
 8005b3a:	d004      	beq.n	8005b46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fbed 	bl	800631e <USBD_CtlError>
                break;
 8005b44:	e091      	b.n	8005c6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da0b      	bge.n	8005b66 <USBD_StdEPReq+0x212>
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	3304      	adds	r3, #4
 8005b64:	e00b      	b.n	8005b7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fc37 	bl	8006400 <USBD_CtlSendData>
              break;
 8005b92:	e06a      	b.n	8005c6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da11      	bge.n	8005bc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	3324      	adds	r3, #36	; 0x24
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d117      	bne.n	8005be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fbb0 	bl	800631e <USBD_CtlError>
                  break;
 8005bbe:	e054      	b.n	8005c6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fb9d 	bl	800631e <USBD_CtlError>
                  break;
 8005be4:	e041      	b.n	8005c6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da0b      	bge.n	8005c06 <USBD_StdEPReq+0x2b2>
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	e00b      	b.n	8005c1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <USBD_StdEPReq+0x2d8>
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d103      	bne.n	8005c34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e00e      	b.n	8005c52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 f8eb 	bl	8006e14 <USBD_LL_IsStallEP>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2202      	movs	r2, #2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fbd1 	bl	8006400 <USBD_CtlSendData>
              break;
 8005c5e:	e004      	b.n	8005c6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fb5b 	bl	800631e <USBD_CtlError>
              break;
 8005c68:	bf00      	nop
          }
          break;
 8005c6a:	e004      	b.n	8005c76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fb55 	bl	800631e <USBD_CtlError>
          break;
 8005c74:	bf00      	nop
      }
      break;
 8005c76:	e005      	b.n	8005c84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fb4f 	bl	800631e <USBD_CtlError>
      break;
 8005c80:	e000      	b.n	8005c84 <USBD_StdEPReq+0x330>
      break;
 8005c82:	bf00      	nop
  }

  return ret;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	885b      	ldrh	r3, [r3, #2]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	f200 8128 	bhi.w	8005f06 <USBD_GetDescriptor+0x276>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <USBD_GetDescriptor+0x2c>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005d31 	.word	0x08005d31
 8005cc8:	08005f07 	.word	0x08005f07
 8005ccc:	08005f07 	.word	0x08005f07
 8005cd0:	08005ea7 	.word	0x08005ea7
 8005cd4:	08005ed3 	.word	0x08005ed3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7c12      	ldrb	r2, [r2, #16]
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
      break;
 8005cee:	e112      	b.n	8005f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7c1b      	ldrb	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10d      	bne.n	8005d14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	f107 0208 	add.w	r2, r7, #8
 8005d04:	4610      	mov	r0, r2
 8005d06:	4798      	blx	r3
 8005d08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	2202      	movs	r2, #2
 8005d10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d12:	e100      	b.n	8005f16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	701a      	strb	r2, [r3, #0]
      break;
 8005d2e:	e0f2      	b.n	8005f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	885b      	ldrh	r3, [r3, #2]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	f200 80ac 	bhi.w	8005e94 <USBD_GetDescriptor+0x204>
 8005d3c:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <USBD_GetDescriptor+0xb4>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d5d 	.word	0x08005d5d
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005df9 	.word	0x08005df9
 8005d54:	08005e2d 	.word	0x08005e2d
 8005d58:	08005e61 	.word	0x08005e61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	7c12      	ldrb	r2, [r2, #16]
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d7e:	e091      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 facb 	bl	800631e <USBD_CtlError>
            err++;
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d8e:	e089      	b.n	8005ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7c12      	ldrb	r2, [r2, #16]
 8005da8:	f107 0108 	add.w	r1, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db2:	e077      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fab1 	bl	800631e <USBD_CtlError>
            err++;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc2:	e06f      	b.n	8005ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7c12      	ldrb	r2, [r2, #16]
 8005ddc:	f107 0108 	add.w	r1, r7, #8
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005de6:	e05d      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa97 	bl	800631e <USBD_CtlError>
            err++;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	3301      	adds	r3, #1
 8005df4:	72fb      	strb	r3, [r7, #11]
          break;
 8005df6:	e055      	b.n	8005ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7c12      	ldrb	r2, [r2, #16]
 8005e10:	f107 0108 	add.w	r1, r7, #8
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1a:	e043      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa7d 	bl	800631e <USBD_CtlError>
            err++;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	3301      	adds	r3, #1
 8005e28:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2a:	e03b      	b.n	8005ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4e:	e029      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa63 	bl	800631e <USBD_CtlError>
            err++;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5e:	e021      	b.n	8005ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	7c12      	ldrb	r2, [r2, #16]
 8005e78:	f107 0108 	add.w	r1, r7, #8
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
 8005e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e82:	e00f      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa49 	bl	800631e <USBD_CtlError>
            err++;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	72fb      	strb	r3, [r7, #11]
          break;
 8005e92:	e007      	b.n	8005ea4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa41 	bl	800631e <USBD_CtlError>
          err++;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ea2:	bf00      	nop
      }
      break;
 8005ea4:	e037      	b.n	8005f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7c1b      	ldrb	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	f107 0208 	add.w	r2, r7, #8
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4798      	blx	r3
 8005ebe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ec0:	e029      	b.n	8005f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa2a 	bl	800631e <USBD_CtlError>
        err++;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed0:	e021      	b.n	8005f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7c1b      	ldrb	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f107 0208 	add.w	r2, r7, #8
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4798      	blx	r3
 8005eea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef4:	e00f      	b.n	8005f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa10 	bl	800631e <USBD_CtlError>
        err++;
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	3301      	adds	r3, #1
 8005f02:	72fb      	strb	r3, [r7, #11]
      break;
 8005f04:	e007      	b.n	8005f16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa08 	bl	800631e <USBD_CtlError>
      err++;
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	3301      	adds	r3, #1
 8005f12:	72fb      	strb	r3, [r7, #11]
      break;
 8005f14:	bf00      	nop
  }

  if (err != 0U)
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d11e      	bne.n	8005f5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	88db      	ldrh	r3, [r3, #6]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88da      	ldrh	r2, [r3, #6]
 8005f2e:	893b      	ldrh	r3, [r7, #8]
 8005f30:	4293      	cmp	r3, r2
 8005f32:	bf28      	it	cs
 8005f34:	4613      	movcs	r3, r2
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f3a:	893b      	ldrh	r3, [r7, #8]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa5d 	bl	8006400 <USBD_CtlSendData>
 8005f46:	e009      	b.n	8005f5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9e7 	bl	800631e <USBD_CtlError>
 8005f50:	e004      	b.n	8005f5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 faae 	bl	80064b4 <USBD_CtlSendStatus>
 8005f58:	e000      	b.n	8005f5c <USBD_GetDescriptor+0x2cc>
    return;
 8005f5a:	bf00      	nop
  }
}
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop

08005f64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	889b      	ldrh	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d131      	bne.n	8005fda <USBD_SetAddress+0x76>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	88db      	ldrh	r3, [r3, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d12d      	bne.n	8005fda <USBD_SetAddress+0x76>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	2b7f      	cmp	r3, #127	; 0x7f
 8005f84:	d829      	bhi.n	8005fda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	885b      	ldrh	r3, [r3, #2]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d104      	bne.n	8005fa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f9bc 	bl	800631e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	e01d      	b.n	8005fe4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 ff59 	bl	8006e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa7a 	bl	80064b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fce:	e009      	b.n	8005fe4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd8:	e004      	b.n	8005fe4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f99e 	bl	800631e <USBD_CtlError>
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	885b      	ldrh	r3, [r3, #2]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b4e      	ldr	r3, [pc, #312]	; (800613c <USBD_SetConfig+0x150>)
 8006002:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006004:	4b4d      	ldr	r3, [pc, #308]	; (800613c <USBD_SetConfig+0x150>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d905      	bls.n	8006018 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f985 	bl	800631e <USBD_CtlError>
    return USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	e08c      	b.n	8006132 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d002      	beq.n	800602a <USBD_SetConfig+0x3e>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d029      	beq.n	800607c <USBD_SetConfig+0x90>
 8006028:	e075      	b.n	8006116 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800602a:	4b44      	ldr	r3, [pc, #272]	; (800613c <USBD_SetConfig+0x150>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d020      	beq.n	8006074 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006032:	4b42      	ldr	r3, [pc, #264]	; (800613c <USBD_SetConfig+0x150>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800603c:	4b3f      	ldr	r3, [pc, #252]	; (800613c <USBD_SetConfig+0x150>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fe ffe7 	bl	8005016 <USBD_SetClassConfig>
 8006048:	4603      	mov	r3, r0
 800604a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f962 	bl	800631e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006062:	e065      	b.n	8006130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa25 	bl	80064b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2203      	movs	r2, #3
 800606e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006072:	e05d      	b.n	8006130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa1d 	bl	80064b4 <USBD_CtlSendStatus>
      break;
 800607a:	e059      	b.n	8006130 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800607c:	4b2f      	ldr	r3, [pc, #188]	; (800613c <USBD_SetConfig+0x150>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d112      	bne.n	80060aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <USBD_SetConfig+0x150>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006096:	4b29      	ldr	r3, [pc, #164]	; (800613c <USBD_SetConfig+0x150>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fe ffd6 	bl	800504e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa06 	bl	80064b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060a8:	e042      	b.n	8006130 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80060aa:	4b24      	ldr	r3, [pc, #144]	; (800613c <USBD_SetConfig+0x150>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d02a      	beq.n	800610e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fe ffc4 	bl	800504e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060c6:	4b1d      	ldr	r3, [pc, #116]	; (800613c <USBD_SetConfig+0x150>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <USBD_SetConfig+0x150>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fe ff9d 	bl	8005016 <USBD_SetClassConfig>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00f      	beq.n	8006106 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f918 	bl	800631e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fe ffa9 	bl	800504e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006104:	e014      	b.n	8006130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9d4 	bl	80064b4 <USBD_CtlSendStatus>
      break;
 800610c:	e010      	b.n	8006130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9d0 	bl	80064b4 <USBD_CtlSendStatus>
      break;
 8006114:	e00c      	b.n	8006130 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f900 	bl	800631e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <USBD_SetConfig+0x150>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fe ff92 	bl	800504e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800612a:	2303      	movs	r3, #3
 800612c:	73fb      	strb	r3, [r7, #15]
      break;
 800612e:	bf00      	nop
  }

  return ret;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000160 	.word	0x20000160

08006140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88db      	ldrh	r3, [r3, #6]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d004      	beq.n	800615c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8e2 	bl	800631e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800615a:	e023      	b.n	80061a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	dc02      	bgt.n	800616e <USBD_GetConfig+0x2e>
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc03      	bgt.n	8006174 <USBD_GetConfig+0x34>
 800616c:	e015      	b.n	800619a <USBD_GetConfig+0x5a>
 800616e:	2b03      	cmp	r3, #3
 8006170:	d00b      	beq.n	800618a <USBD_GetConfig+0x4a>
 8006172:	e012      	b.n	800619a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3308      	adds	r3, #8
 800617e:	2201      	movs	r2, #1
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f93c 	bl	8006400 <USBD_CtlSendData>
        break;
 8006188:	e00c      	b.n	80061a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	2201      	movs	r2, #1
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f934 	bl	8006400 <USBD_CtlSendData>
        break;
 8006198:	e004      	b.n	80061a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8be 	bl	800631e <USBD_CtlError>
        break;
 80061a2:	bf00      	nop
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d81e      	bhi.n	8006202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	88db      	ldrh	r3, [r3, #6]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d004      	beq.n	80061d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f8a5 	bl	800631e <USBD_CtlError>
        break;
 80061d4:	e01a      	b.n	800620c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	330c      	adds	r3, #12
 80061f6:	2202      	movs	r2, #2
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f900 	bl	8006400 <USBD_CtlSendData>
      break;
 8006200:	e004      	b.n	800620c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f88a 	bl	800631e <USBD_CtlError>
      break;
 800620a:	bf00      	nop
  }
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	885b      	ldrh	r3, [r3, #2]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f940 	bl	80064b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006234:	e013      	b.n	800625e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	885b      	ldrh	r3, [r3, #2]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d10b      	bne.n	8006256 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	889b      	ldrh	r3, [r3, #4]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	b29b      	uxth	r3, r3
 8006246:	b2da      	uxtb	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f930 	bl	80064b4 <USBD_CtlSendStatus>
}
 8006254:	e003      	b.n	800625e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f860 	bl	800631e <USBD_CtlError>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	2b02      	cmp	r3, #2
 800627c:	d80b      	bhi.n	8006296 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	885b      	ldrh	r3, [r3, #2]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10c      	bne.n	80062a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f910 	bl	80064b4 <USBD_CtlSendStatus>
      }
      break;
 8006294:	e004      	b.n	80062a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f840 	bl	800631e <USBD_CtlError>
      break;
 800629e:	e000      	b.n	80062a2 <USBD_ClrFeature+0x3c>
      break;
 80062a0:	bf00      	nop
  }
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff fa41 	bl	800575c <SWAPBYTE>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fa34 	bl	800575c <SWAPBYTE>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fa27 	bl	800575c <SWAPBYTE>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	80da      	strh	r2, [r3, #6]
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fd34 	bl	8006d98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fd30 	bl	8006d98 <USBD_LL_StallEP>
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d036      	beq.n	80063c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800635a:	6938      	ldr	r0, [r7, #16]
 800635c:	f000 f836 	bl	80063cc <USBD_GetLen>
 8006360:	4603      	mov	r3, r0
 8006362:	3301      	adds	r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	4413      	add	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	701a      	strb	r2, [r3, #0]
  idx++;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	3301      	adds	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	2203      	movs	r2, #3
 8006388:	701a      	strb	r2, [r3, #0]
  idx++;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	3301      	adds	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006390:	e013      	b.n	80063ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4413      	add	r3, r2
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
    idx++;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	3301      	adds	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	4413      	add	r3, r2
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	3301      	adds	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e7      	bne.n	8006392 <USBD_GetString+0x52>
 80063c2:	e000      	b.n	80063c6 <USBD_GetString+0x86>
    return;
 80063c4:	bf00      	nop
  }
}
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063dc:	e005      	b.n	80063ea <USBD_GetLen+0x1e>
  {
    len++;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	3301      	adds	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f5      	bne.n	80063de <USBD_GetLen+0x12>
  }

  return len;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2202      	movs	r2, #2
 8006410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fd3f 	bl	8006eaa <USBD_LL_Transmit>

  return USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fd2e 	bl	8006eaa <USBD_LL_Transmit>

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2203      	movs	r2, #3
 8006468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	2100      	movs	r1, #0
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fd32 	bl	8006eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	2100      	movs	r1, #0
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fd21 	bl	8006eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064c4:	2300      	movs	r3, #0
 80064c6:	2200      	movs	r2, #0
 80064c8:	2100      	movs	r1, #0
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fced 	bl	8006eaa <USBD_LL_Transmit>

  return USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2205      	movs	r2, #5
 80064e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ea:	2300      	movs	r3, #0
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcfb 	bl	8006eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006504:	2200      	movs	r2, #0
 8006506:	4912      	ldr	r1, [pc, #72]	; (8006550 <MX_USB_DEVICE_Init+0x50>)
 8006508:	4812      	ldr	r0, [pc, #72]	; (8006554 <MX_USB_DEVICE_Init+0x54>)
 800650a:	f7fe fd07 	bl	8004f1c <USBD_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006514:	f7fa f8f6 	bl	8000704 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006518:	490f      	ldr	r1, [pc, #60]	; (8006558 <MX_USB_DEVICE_Init+0x58>)
 800651a:	480e      	ldr	r0, [pc, #56]	; (8006554 <MX_USB_DEVICE_Init+0x54>)
 800651c:	f7fe fd2e 	bl	8004f7c <USBD_RegisterClass>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006526:	f7fa f8ed 	bl	8000704 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800652a:	490c      	ldr	r1, [pc, #48]	; (800655c <MX_USB_DEVICE_Init+0x5c>)
 800652c:	4809      	ldr	r0, [pc, #36]	; (8006554 <MX_USB_DEVICE_Init+0x54>)
 800652e:	f7fe fc1f 	bl	8004d70 <USBD_CDC_RegisterInterface>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006538:	f7fa f8e4 	bl	8000704 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800653c:	4805      	ldr	r0, [pc, #20]	; (8006554 <MX_USB_DEVICE_Init+0x54>)
 800653e:	f7fe fd53 	bl	8004fe8 <USBD_Start>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006548:	f7fa f8dc 	bl	8000704 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200000b0 	.word	0x200000b0
 8006554:	20000164 	.word	0x20000164
 8006558:	2000001c 	.word	0x2000001c
 800655c:	2000009c 	.word	0x2000009c

08006560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006564:	2200      	movs	r2, #0
 8006566:	4905      	ldr	r1, [pc, #20]	; (800657c <CDC_Init_FS+0x1c>)
 8006568:	4805      	ldr	r0, [pc, #20]	; (8006580 <CDC_Init_FS+0x20>)
 800656a:	f7fe fc1b 	bl	8004da4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800656e:	4905      	ldr	r1, [pc, #20]	; (8006584 <CDC_Init_FS+0x24>)
 8006570:	4803      	ldr	r0, [pc, #12]	; (8006580 <CDC_Init_FS+0x20>)
 8006572:	f7fe fc39 	bl	8004de8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000c40 	.word	0x20000c40
 8006580:	20000164 	.word	0x20000164
 8006584:	20000440 	.word	0x20000440

08006588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800658c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800658e:	4618      	mov	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	2b23      	cmp	r3, #35	; 0x23
 80065ac:	d84a      	bhi.n	8006644 <CDC_Control_FS+0xac>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <CDC_Control_FS+0x1c>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	08006645 	.word	0x08006645
 80065b8:	08006645 	.word	0x08006645
 80065bc:	08006645 	.word	0x08006645
 80065c0:	08006645 	.word	0x08006645
 80065c4:	08006645 	.word	0x08006645
 80065c8:	08006645 	.word	0x08006645
 80065cc:	08006645 	.word	0x08006645
 80065d0:	08006645 	.word	0x08006645
 80065d4:	08006645 	.word	0x08006645
 80065d8:	08006645 	.word	0x08006645
 80065dc:	08006645 	.word	0x08006645
 80065e0:	08006645 	.word	0x08006645
 80065e4:	08006645 	.word	0x08006645
 80065e8:	08006645 	.word	0x08006645
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006645 	.word	0x08006645
 80065f8:	08006645 	.word	0x08006645
 80065fc:	08006645 	.word	0x08006645
 8006600:	08006645 	.word	0x08006645
 8006604:	08006645 	.word	0x08006645
 8006608:	08006645 	.word	0x08006645
 800660c:	08006645 	.word	0x08006645
 8006610:	08006645 	.word	0x08006645
 8006614:	08006645 	.word	0x08006645
 8006618:	08006645 	.word	0x08006645
 800661c:	08006645 	.word	0x08006645
 8006620:	08006645 	.word	0x08006645
 8006624:	08006645 	.word	0x08006645
 8006628:	08006645 	.word	0x08006645
 800662c:	08006645 	.word	0x08006645
 8006630:	08006645 	.word	0x08006645
 8006634:	08006645 	.word	0x08006645
 8006638:	08006645 	.word	0x08006645
 800663c:	08006645 	.word	0x08006645
 8006640:	08006645 	.word	0x08006645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006644:	bf00      	nop
  }

  return (USBD_OK);
 8006646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	482d      	ldr	r0, [pc, #180]	; (8006718 <CDC_Receive_FS+0xc4>)
 8006662:	f7fe fbc1 	bl	8004de8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006666:	482c      	ldr	r0, [pc, #176]	; (8006718 <CDC_Receive_FS+0xc4>)
 8006668:	f7fe fc22 	bl	8004eb0 <USBD_CDC_ReceivePacket>

  memset (buffer, '\0', 64);  // clear the buffer   2.parametredeki karakteri baştan başlayarak , 1.parametreye , 3.parametre kadar kopyalar
 800666c:	2240      	movs	r2, #64	; 0x40
 800666e:	2100      	movs	r1, #0
 8006670:	482a      	ldr	r0, [pc, #168]	; (800671c <CDC_Receive_FS+0xc8>)
 8006672:	f000 fce5 	bl	8007040 <memset>
  uint8_t len = (uint8_t)*Len;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	461a      	mov	r2, r3
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4826      	ldr	r0, [pc, #152]	; (800671c <CDC_Receive_FS+0xc8>)
 8006684:	f000 fcce 	bl	8007024 <memcpy>
if(buffer[0]=='A')
 8006688:	4b24      	ldr	r3, [pc, #144]	; (800671c <CDC_Receive_FS+0xc8>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b41      	cmp	r3, #65	; 0x41
 800668e:	d137      	bne.n	8006700 <CDC_Receive_FS+0xac>
{
  switch(buffer[1])
 8006690:	4b22      	ldr	r3, [pc, #136]	; (800671c <CDC_Receive_FS+0xc8>)
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b31      	cmp	r3, #49	; 0x31
 8006696:	d002      	beq.n	800669e <CDC_Receive_FS+0x4a>
 8006698:	2b32      	cmp	r3, #50	; 0x32
 800669a:	d015      	beq.n	80066c8 <CDC_Receive_FS+0x74>
 800669c:	e029      	b.n	80066f2 <CDC_Receive_FS+0x9e>
  {
  case '1':
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 800669e:	2201      	movs	r2, #1
 80066a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066a4:	481e      	ldr	r0, [pc, #120]	; (8006720 <CDC_Receive_FS+0xcc>)
 80066a6:	f7fa fc0f 	bl	8000ec8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80066aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ae:	f7fa f939 	bl	8000924 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
 80066b2:	2200      	movs	r2, #0
 80066b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066b8:	4819      	ldr	r0, [pc, #100]	; (8006720 <CDC_Receive_FS+0xcc>)
 80066ba:	f7fa fc05 	bl	8000ec8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80066be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066c2:	f7fa f92f 	bl	8000924 <HAL_Delay>
	  break;
 80066c6:	e01c      	b.n	8006702 <CDC_Receive_FS+0xae>
  case '2':
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ce:	4814      	ldr	r0, [pc, #80]	; (8006720 <CDC_Receive_FS+0xcc>)
 80066d0:	f7fa fbfa 	bl	8000ec8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80066d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066d8:	f7fa f924 	bl	8000924 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e2:	480f      	ldr	r0, [pc, #60]	; (8006720 <CDC_Receive_FS+0xcc>)
 80066e4:	f7fa fbf0 	bl	8000ec8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80066e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ec:	f7fa f91a 	bl	8000924 <HAL_Delay>
	  break;
 80066f0:	e007      	b.n	8006702 <CDC_Receive_FS+0xae>
  default:
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14| GPIO_PIN_15,GPIO_PIN_SET);
 80066f2:	2201      	movs	r2, #1
 80066f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80066f8:	4809      	ldr	r0, [pc, #36]	; (8006720 <CDC_Receive_FS+0xcc>)
 80066fa:	f7fa fbe5 	bl	8000ec8 <HAL_GPIO_WritePin>
      break;
 80066fe:	e000      	b.n	8006702 <CDC_Receive_FS+0xae>
  }
}
 8006700:	bf00      	nop

  memset(Buf, '\0', len);   // clear the Buf also
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	461a      	mov	r2, r3
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc99 	bl	8007040 <memset>

  return (USBD_OK);
 800670e:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000164 	.word	0x20000164
 800671c:	2000011c 	.word	0x2000011c
 8006720:	40020c00 	.word	0x40020c00

08006724 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <CDC_Transmit_FS+0x48>)
 8006736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800673a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006746:	2301      	movs	r3, #1
 8006748:	e00b      	b.n	8006762 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800674a:	887b      	ldrh	r3, [r7, #2]
 800674c:	461a      	mov	r2, r3
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4806      	ldr	r0, [pc, #24]	; (800676c <CDC_Transmit_FS+0x48>)
 8006752:	f7fe fb27 	bl	8004da4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006756:	4805      	ldr	r0, [pc, #20]	; (800676c <CDC_Transmit_FS+0x48>)
 8006758:	f7fe fb64 	bl	8004e24 <USBD_CDC_TransmitPacket>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000164 	.word	0x20000164

08006770 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2212      	movs	r2, #18
 80067a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80067a6:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	200000cc 	.word	0x200000cc

080067b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	6039      	str	r1, [r7, #0]
 80067c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2204      	movs	r2, #4
 80067c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067ca:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200000e0 	.word	0x200000e0

080067dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d105      	bne.n	80067fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	4907      	ldr	r1, [pc, #28]	; (8006810 <USBD_FS_ProductStrDescriptor+0x34>)
 80067f2:	4808      	ldr	r0, [pc, #32]	; (8006814 <USBD_FS_ProductStrDescriptor+0x38>)
 80067f4:	f7ff fda4 	bl	8006340 <USBD_GetString>
 80067f8:	e004      	b.n	8006804 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	4904      	ldr	r1, [pc, #16]	; (8006810 <USBD_FS_ProductStrDescriptor+0x34>)
 80067fe:	4805      	ldr	r0, [pc, #20]	; (8006814 <USBD_FS_ProductStrDescriptor+0x38>)
 8006800:	f7ff fd9e 	bl	8006340 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006804:	4b02      	ldr	r3, [pc, #8]	; (8006810 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20001440 	.word	0x20001440
 8006814:	0800708c 	.word	0x0800708c

08006818 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	4904      	ldr	r1, [pc, #16]	; (8006838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006828:	4804      	ldr	r0, [pc, #16]	; (800683c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800682a:	f7ff fd89 	bl	8006340 <USBD_GetString>
  return USBD_StrDesc;
 800682e:	4b02      	ldr	r3, [pc, #8]	; (8006838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20001440 	.word	0x20001440
 800683c:	080070a4 	.word	0x080070a4

08006840 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	221a      	movs	r2, #26
 8006850:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006852:	f000 f843 	bl	80068dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006856:	4b02      	ldr	r3, [pc, #8]	; (8006860 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200000e4 	.word	0x200000e4

08006864 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4907      	ldr	r1, [pc, #28]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x34>)
 800687a:	4808      	ldr	r0, [pc, #32]	; (800689c <USBD_FS_ConfigStrDescriptor+0x38>)
 800687c:	f7ff fd60 	bl	8006340 <USBD_GetString>
 8006880:	e004      	b.n	800688c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4904      	ldr	r1, [pc, #16]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006886:	4805      	ldr	r0, [pc, #20]	; (800689c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006888:	f7ff fd5a 	bl	8006340 <USBD_GetString>
  }
  return USBD_StrDesc;
 800688c:	4b02      	ldr	r3, [pc, #8]	; (8006898 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20001440 	.word	0x20001440
 800689c:	080070b8 	.word	0x080070b8

080068a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d105      	bne.n	80068be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4907      	ldr	r1, [pc, #28]	; (80068d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068b6:	4808      	ldr	r0, [pc, #32]	; (80068d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068b8:	f7ff fd42 	bl	8006340 <USBD_GetString>
 80068bc:	e004      	b.n	80068c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4904      	ldr	r1, [pc, #16]	; (80068d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068c2:	4805      	ldr	r0, [pc, #20]	; (80068d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068c4:	f7ff fd3c 	bl	8006340 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068c8:	4b02      	ldr	r3, [pc, #8]	; (80068d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001440 	.word	0x20001440
 80068d8:	080070c4 	.word	0x080070c4

080068dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80068e2:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <Get_SerialNum+0x44>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <Get_SerialNum+0x48>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068ee:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <Get_SerialNum+0x4c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d009      	beq.n	8006916 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006902:	2208      	movs	r2, #8
 8006904:	4909      	ldr	r1, [pc, #36]	; (800692c <Get_SerialNum+0x50>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f814 	bl	8006934 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800690c:	2204      	movs	r2, #4
 800690e:	4908      	ldr	r1, [pc, #32]	; (8006930 <Get_SerialNum+0x54>)
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f000 f80f 	bl	8006934 <IntToUnicode>
  }
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	1fff7a10 	.word	0x1fff7a10
 8006924:	1fff7a14 	.word	0x1fff7a14
 8006928:	1fff7a18 	.word	0x1fff7a18
 800692c:	200000e6 	.word	0x200000e6
 8006930:	200000f6 	.word	0x200000f6

08006934 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
 800694a:	e027      	b.n	800699c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	0f1b      	lsrs	r3, r3, #28
 8006950:	2b09      	cmp	r3, #9
 8006952:	d80b      	bhi.n	800696c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0f1b      	lsrs	r3, r3, #28
 8006958:	b2da      	uxtb	r2, r3
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4619      	mov	r1, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	440b      	add	r3, r1
 8006964:	3230      	adds	r2, #48	; 0x30
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e00a      	b.n	8006982 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	0f1b      	lsrs	r3, r3, #28
 8006970:	b2da      	uxtb	r2, r3
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4619      	mov	r1, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	440b      	add	r3, r1
 800697c:	3237      	adds	r2, #55	; 0x37
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	3301      	adds	r3, #1
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	3301      	adds	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
 800699c:	7dfa      	ldrb	r2, [r7, #23]
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d3d3      	bcc.n	800694c <IntToUnicode+0x18>
  }
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069bc:	f107 0314 	add.w	r3, r7, #20
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	605a      	str	r2, [r3, #4]
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	60da      	str	r2, [r3, #12]
 80069ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069d4:	d13a      	bne.n	8006a4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	4b1e      	ldr	r3, [pc, #120]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6313      	str	r3, [r2, #48]	; 0x30
 80069e6:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f8:	2302      	movs	r3, #2
 80069fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a00:	2303      	movs	r3, #3
 8006a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a04:	230a      	movs	r3, #10
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a08:	f107 0314 	add.w	r3, r7, #20
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4812      	ldr	r0, [pc, #72]	; (8006a58 <HAL_PCD_MspInit+0xa4>)
 8006a10:	f7fa f8be 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a14:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	4a0e      	ldr	r2, [pc, #56]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	6353      	str	r3, [r2, #52]	; 0x34
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	4a0a      	ldr	r2, [pc, #40]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 8006a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a2e:	6453      	str	r3, [r2, #68]	; 0x44
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <HAL_PCD_MspInit+0xa0>)
 8006a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2100      	movs	r1, #0
 8006a40:	2043      	movs	r0, #67	; 0x43
 8006a42:	f7fa f86e 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a46:	2043      	movs	r0, #67	; 0x43
 8006a48:	f7fa f887 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3728      	adds	r7, #40	; 0x28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40023800 	.word	0x40023800
 8006a58:	40020000 	.word	0x40020000

08006a5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7fe fb05 	bl	8005082 <USBD_LL_SetupStage>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f7fe fb3f 	bl	800512c <USBD_LL_DataOutStage>
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ac8:	78fa      	ldrb	r2, [r7, #3]
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	334c      	adds	r3, #76	; 0x4c
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fe fbd8 	bl	8005292 <USBD_LL_DataInStage>
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fd0c 	bl	8005516 <USBD_LL_SOF>
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
 8006b1e:	e008      	b.n	8006b32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d102      	bne.n	8006b2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e001      	b.n	8006b32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006b2e:	f7f9 fde9 	bl	8000704 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b38:	7bfa      	ldrb	r2, [r7, #15]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fcac 	bl	800549a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe fc54 	bl	80053f6 <USBD_LL_Reset>
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fca7 	bl	80054ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <HAL_PCD_SuspendCallback+0x48>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	4a03      	ldr	r2, [pc, #12]	; (8006ba0 <HAL_PCD_SuspendCallback+0x48>)
 8006b92:	f043 0306 	orr.w	r3, r3, #6
 8006b96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fc97 	bl	80054e6 <USBD_LL_Resume>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fcef 	bl	80055ba <USBD_LL_IsoOUTIncomplete>
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fcab 	bl	8005556 <USBD_LL_IsoINIncomplete>
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fd01 	bl	800561e <USBD_LL_DevConnected>
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fcfe 	bl	8005634 <USBD_LL_DevDisconnected>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d13c      	bne.n	8006cca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c50:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c70:	2202      	movs	r2, #2
 8006c72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c74:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c8c:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006c92:	4b10      	ldr	r3, [pc, #64]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c98:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c9e:	480d      	ldr	r0, [pc, #52]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006ca0:	f7fa f92b 	bl	8000efa <HAL_PCD_Init>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006caa:	f7f9 fd2b 	bl	8000704 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	4808      	ldr	r0, [pc, #32]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006cb2:	f7fb fb82 	bl	80023ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006cb6:	2240      	movs	r2, #64	; 0x40
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4806      	ldr	r0, [pc, #24]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006cbc:	f7fb fb36 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	4803      	ldr	r0, [pc, #12]	; (8006cd4 <USBD_LL_Init+0x94>)
 8006cc6:	f7fb fb31 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20001640 	.word	0x20001640

08006cd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fa fa20 	bl	8001134 <HAL_PCD_Start>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f942 	bl	8006f84 <USBD_Get_USB_Status>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	70fb      	strb	r3, [r7, #3]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70bb      	strb	r3, [r7, #2]
 8006d24:	4613      	mov	r3, r2
 8006d26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d36:	78bb      	ldrb	r3, [r7, #2]
 8006d38:	883a      	ldrh	r2, [r7, #0]
 8006d3a:	78f9      	ldrb	r1, [r7, #3]
 8006d3c:	f7fa fef1 	bl	8001b22 <HAL_PCD_EP_Open>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f91c 	bl	8006f84 <USBD_Get_USB_Status>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fa ff3a 	bl	8001bf2 <HAL_PCD_EP_Close>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f8fd 	bl	8006f84 <USBD_Get_USB_Status>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fb f812 	bl	8001de0 <HAL_PCD_EP_SetStall>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f8de 	bl	8006f84 <USBD_Get_USB_Status>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006df0:	78fa      	ldrb	r2, [r7, #3]
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fb f857 	bl	8001ea8 <HAL_PCD_EP_ClrStall>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 f8bf 	bl	8006f84 <USBD_Get_USB_Status>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da0b      	bge.n	8006e48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	333e      	adds	r3, #62	; 0x3e
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	e00b      	b.n	8006e60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006e5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa fe24 	bl	8001ad8 <HAL_PCD_SetAddress>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f874 	bl	8006f84 <USBD_Get_USB_Status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ec8:	7af9      	ldrb	r1, [r7, #11]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	f7fa ff3d 	bl	8001d4c <HAL_PCD_EP_Transmit>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f853 	bl	8006f84 <USBD_Get_USB_Status>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f0a:	7af9      	ldrb	r1, [r7, #11]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	f7fa feb9 	bl	8001c86 <HAL_PCD_EP_Receive>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f832 	bl	8006f84 <USBD_Get_USB_Status>
 8006f20:	4603      	mov	r3, r0
 8006f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fa fee9 	bl	8001d1c <HAL_PCD_EP_GetRxCount>
 8006f4a:	4603      	mov	r3, r0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <USBD_static_malloc+0x18>)
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20001b4c 	.word	0x20001b4c

08006f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d817      	bhi.n	8006fc8 <USBD_Get_USB_Status+0x44>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_Get_USB_Status+0x1c>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fb1 	.word	0x08006fb1
 8006fa4:	08006fb7 	.word	0x08006fb7
 8006fa8:	08006fbd 	.word	0x08006fbd
 8006fac:	08006fc3 	.word	0x08006fc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fb4:	e00b      	b.n	8006fce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8006fba:	e008      	b.n	8006fce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc0:	e005      	b.n	8006fce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc6:	e002      	b.n	8006fce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	73fb      	strb	r3, [r7, #15]
    break;
 8006fcc:	bf00      	nop
  }
  return usb_status;
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	; (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	; (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	; (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	; (8007020 <__libc_init_array+0x44>)
 8006ff0:	f000 f82e 	bl	8007050 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	080070ec 	.word	0x080070ec
 8007018:	080070ec 	.word	0x080070ec
 800701c:	080070ec 	.word	0x080070ec
 8007020:	080070f0 	.word	0x080070f0

08007024 <memcpy>:
 8007024:	440a      	add	r2, r1
 8007026:	4291      	cmp	r1, r2
 8007028:	f100 33ff 	add.w	r3, r0, #4294967295
 800702c:	d100      	bne.n	8007030 <memcpy+0xc>
 800702e:	4770      	bx	lr
 8007030:	b510      	push	{r4, lr}
 8007032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800703a:	4291      	cmp	r1, r2
 800703c:	d1f9      	bne.n	8007032 <memcpy+0xe>
 800703e:	bd10      	pop	{r4, pc}

08007040 <memset>:
 8007040:	4402      	add	r2, r0
 8007042:	4603      	mov	r3, r0
 8007044:	4293      	cmp	r3, r2
 8007046:	d100      	bne.n	800704a <memset+0xa>
 8007048:	4770      	bx	lr
 800704a:	f803 1b01 	strb.w	r1, [r3], #1
 800704e:	e7f9      	b.n	8007044 <memset+0x4>

08007050 <_init>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr

0800705c <_fini>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr
