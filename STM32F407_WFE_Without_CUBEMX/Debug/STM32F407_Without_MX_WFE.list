
STM32F407_Without_MX_WFE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f74  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002104  08002104  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800210c  0800210c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000064  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e6b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001624  00000000  00000000  00028eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  0002a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020785  00000000  00000000  0002ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008acd  00000000  00000000  0004b2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7001  00000000  00000000  00053dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011adc3  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000608  00000000  00000000  0011ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000199c  00000000  00000000  0011b420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020e4 	.word	0x080020e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080020e4 	.word	0x080020e4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart2;
void SysTick_Handler (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004e0:	f000 fa00 	bl	80008e4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004e4:	f000 fb2f 	bl	8000b46 <HAL_SYSTICK_IRQHandler>

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fd7d 	bl	8000ff0 <HAL_GPIO_EXTI_IRQHandler>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <USART2_IRQHandler+0x10>)
 8000502:	f000 fea1 	bl	8001248 <HAL_UART_IRQHandler>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000034 	.word	0x20000034

08000510 <main>:
extern uint8_t some_data[];



int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

	GPIO_Init();
 8000514:	f000 f834 	bl	8000580 <GPIO_Init>

	HAL_Init();
 8000518:	f000 f992 	bl	8000840 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);

	//HAL_SuspendTick();

	UART2_Init();
 800051c:	f000 f892 	bl	8000644 <UART2_Init>

	GPIO_AnalogConfig();
 8000520:	f000 f80a 	bl	8000538 <GPIO_AnalogConfig>


	while(1)
	{
		//going to sleep
		 __WFI();
 8000524:	bf30      	wfi
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4801      	ldr	r0, [pc, #4]	; (8000534 <main+0x24>)
 800052e:	f000 fd45 	bl	8000fbc <HAL_GPIO_WritePin>
		 __WFI();
 8000532:	e7f7      	b.n	8000524 <main+0x14>
 8000534:	40020c00 	.word	0x40020c00

08000538 <GPIO_AnalogConfig>:


 }

void GPIO_AnalogConfig(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08c      	sub	sp, #48	; 0x30
 800053c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioA,GpioD;

	uint32_t gpio_pins =  GPIO_PIN_1 |GPIO_PIN_4 | \
 800053e:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
						 GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7 |\
						 GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |\
						 GPIO_PIN_11 | GPIO_PIN_12 |GPIO_PIN_13 | \
						 GPIO_PIN_14 | GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 8000544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000546:	61bb      	str	r3, [r7, #24]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000548:	2303      	movs	r3, #3
 800054a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA,&GpioA);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <GPIO_AnalogConfig+0x40>)
 8000554:	f000 fb96 	bl	8000c84 <HAL_GPIO_Init>

	gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2|  \
 8000558:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
			    GPIO_PIN_3 | GPIO_PIN_4 |  GPIO_PIN_5 | \
			    GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | \
			    GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
			     GPIO_PIN_14 | GPIO_PIN_15;

	GpioD.Pin = gpio_pins;
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	607b      	str	r3, [r7, #4]
	GpioD.Mode = GPIO_MODE_ANALOG;
 8000562:	2303      	movs	r3, #3
 8000564:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD,&GpioD);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <GPIO_AnalogConfig+0x44>)
 800056c:	f000 fb8a 	bl	8000c84 <HAL_GPIO_Init>


}
 8000570:	bf00      	nop
 8000572:	3730      	adds	r7, #48	; 0x30
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40020000 	.word	0x40020000
 800057c:	40020c00 	.word	0x40020c00

08000580 <GPIO_Init>:


void GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <GPIO_Init+0xb8>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <GPIO_Init+0xb8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <GPIO_Init+0xb8>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <GPIO_Init+0xb8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a23      	ldr	r2, [pc, #140]	; (8000638 <GPIO_Init+0xb8>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <GPIO_Init+0xb8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE();
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <GPIO_Init+0xb8>)
 80005c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005c2:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <GPIO_Init+0xb8>)
 80005c4:	f023 0308 	bic.w	r3, r3, #8
 80005c8:	6513      	str	r3, [r2, #80]	; 0x50


	GPIO_InitTypeDef ledgpio , buttongpio;

	ledgpio.Pin = GPIO_PIN_13;
 80005ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ce:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&ledgpio);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <GPIO_Init+0xbc>)
 80005e0:	f000 fb50 	bl	8000c84 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_12;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&ledgpio);
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4619      	mov	r1, r3
 80005f8:	4810      	ldr	r0, [pc, #64]	; (800063c <GPIO_Init+0xbc>)
 80005fa:	f000 fb43 	bl	8000c84 <HAL_GPIO_Init>



	buttongpio.Pin = GPIO_PIN_0;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_EVT_FALLING;
 8000602:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8000606:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA,&buttongpio);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4619      	mov	r1, r3
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <GPIO_Init+0xc0>)
 8000614:	f000 fb36 	bl	8000c84 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061e:	4807      	ldr	r0, [pc, #28]	; (800063c <GPIO_Init+0xbc>)
 8000620:	f000 fccc 	bl	8000fbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <GPIO_Init+0xbc>)
 800062c:	f000 fcc6 	bl	8000fbc <HAL_GPIO_WritePin>


}
 8000630:	bf00      	nop
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40020c00 	.word	0x40020c00
 8000640:	40020000 	.word	0x40020000

08000644 <UART2_Init>:



void UART2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0


	huart2.Instance = USART2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <UART2_Init+0x44>)
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <UART2_Init+0x48>)
 800064c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate =9600;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <UART2_Init+0x44>)
 8000650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000654:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <UART2_Init+0x44>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <UART2_Init+0x44>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <UART2_Init+0x44>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <UART2_Init+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <UART2_Init+0x44>)
 8000670:	2208      	movs	r2, #8
 8000672:	615a      	str	r2, [r3, #20]


	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <UART2_Init+0x44>)
 8000676:	f000 fd07 	bl	8001088 <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <UART2_Init+0x40>
	{

		Error_handler();
 8000680:	f000 f82e 	bl	80006e0 <Error_handler>
	}

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000034 	.word	0x20000034
 800068c:	40004400 	.word	0x40004400

08000690 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	if ( HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK)
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x34>)
 800069c:	f7ff fd94 	bl	80001c8 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006ac:	f000 fd39 	bl	8001122 <HAL_UART_Transmit>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Error_handler();
 80006b6:	f000 f813 	bl	80006e0 <Error_handler>
	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000034 	.word	0x20000034

080006cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <Error_handler>:
void Error_handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	while(1);
 80006e4:	e7fe      	b.n	80006e4 <Error_handler+0x4>
	...

080006e8 <HAL_MspInit>:

#include "main.h"
#include "stm32f4xx_hal_tim.h"

void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    //LOW LEVEL INIT
	//Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f9e9 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions ARM CORTEX MX
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_MspInit+0x40>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <HAL_MspInit+0x40>)
 80006f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006fc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	f06f 000b 	mvn.w	r0, #11
 8000706:	f000 f9e8 	bl	8000ada <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	f06f 000a 	mvn.w	r0, #10
 8000712:	f000 f9e2 	bl	8000ada <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	f06f 0009 	mvn.w	r0, #9
 800071e:	f000 f9dc 	bl	8000ada <HAL_NVIC_SetPriority>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_UART_MspInit>:
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,1,0);

}

 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //USART 2 LOW LEVEL INIT

	 //ENABLE CLOCK USART2 PERIPHERAL
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE();
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <HAL_UART_MspInit+0x94>)
 800073a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800073e:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <HAL_UART_MspInit+0x94>)
 800074a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <HAL_UART_MspInit+0x94>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_UART_MspInit+0x94>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

	 //PINMUXING
	 gpio_uart.Pin = GPIO_PIN_2;
 8000778:	2304      	movs	r3, #4
 800077a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000788:	2307      	movs	r3, #7
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <HAL_UART_MspInit+0x98>)
 8000794:	f000 fa76 	bl	8000c84 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000798:	2308      	movs	r3, #8
 800079a:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <HAL_UART_MspInit+0x98>)
 80007a4:	f000 fa6e 	bl	8000c84 <HAL_GPIO_Init>
	 //NVIC SETTINGS
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a8:	2026      	movs	r0, #38	; 0x26
 80007aa:	f000 f9b2 	bl	8000b12 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2026      	movs	r0, #38	; 0x26
 80007b4:	f000 f991 	bl	8000ada <HAL_NVIC_SetPriority>

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000

080007c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f2:	490e      	ldr	r1, [pc, #56]	; (800082c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000808:	4c0b      	ldr	r4, [pc, #44]	; (8000838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000816:	f7ff ffd7 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f001 fc3f 	bl	800209c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081e:	f7ff fe77 	bl	8000510 <main>
  bx  lr    
 8000822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000830:	08002114 	.word	0x08002114
  ldr r2, =_sbss
 8000834:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000838:	2000007c 	.word	0x2000007c

0800083c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_Init+0x40>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_Init+0x40>)
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x40>)
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f92b 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff38 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023c00 	.word	0x40023c00

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f943 	bl	8000b2e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f90b 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000000c 	.word	0x2000000c
 80008dc:	20000014 	.word	0x20000014
 80008e0:	20000010 	.word	0x20000010

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000014 	.word	0x20000014
 8000908:	20000078 	.word	0x20000078

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000078 	.word	0x20000078

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <__NVIC_EnableIRQ+0x38>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff29 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff3e 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff31 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b4a:	f000 f802 	bl	8000b52 <HAL_SYSTICK_Callback>
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b6e:	f7ff fecd 	bl	800090c <HAL_GetTick>
 8000b72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d008      	beq.n	8000b92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e052      	b.n	8000c38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_Abort+0x62>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0201 	bic.w	r2, r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000be2:	e013      	b.n	8000c0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000be4:	f7ff fe92 	bl	800090c <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b05      	cmp	r3, #5
 8000bf0:	d90c      	bls.n	8000c0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e015      	b.n	8000c38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1e4      	bne.n	8000be4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c1e:	223f      	movs	r2, #63	; 0x3f
 8000c20:	409a      	lsls	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d004      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00c      	b.n	8000c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2205      	movs	r2, #5
 8000c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0201 	bic.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	e16b      	b.n	8000f78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f040 815a 	bne.w	8000f72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d130      	bne.n	8000d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d017      	beq.n	8000d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	69b9      	ldr	r1, [r7, #24]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80b4 	beq.w	8000f72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e26:	4a5b      	ldr	r2, [pc, #364]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x314>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x318>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_GPIO_Init+0x31c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_GPIO_Init+0x324>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x216>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x328>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x212>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x32c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x20e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x20a>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00e      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e8e:	2308      	movs	r3, #8
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f ae90 	bls.w	8000ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40021c00 	.word	0x40021c00
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd8:	e003      	b.n	8000fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	041a      	lsls	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb3e 	bl	8000690 <HAL_GPIO_EXTI_Callback>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_RCC_GetHCLKFreq+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800103c:	f7ff fff0 	bl	8001020 <HAL_RCC_GetHCLKFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	0a9b      	lsrs	r3, r3, #10
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	4903      	ldr	r1, [pc, #12]	; (800105c <HAL_RCC_GetPCLK1Freq+0x24>)
 800104e:	5ccb      	ldrb	r3, [r1, r3]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	080020fc 	.word	0x080020fc

08001060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001064:	f7ff ffdc 	bl	8001020 <HAL_RCC_GetHCLKFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	0b5b      	lsrs	r3, r3, #13
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	4903      	ldr	r1, [pc, #12]	; (8001084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	080020fc 	.word	0x080020fc

08001088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e03f      	b.n	800111a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fb3c 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2224      	movs	r2, #36	; 0x24
 80010b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fd71 	bl	8001bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2220      	movs	r2, #32
 800110c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b08a      	sub	sp, #40	; 0x28
 8001126:	af02      	add	r7, sp, #8
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	d17c      	bne.n	800123c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_UART_Transmit+0x2c>
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e075      	b.n	800123e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_UART_Transmit+0x3e>
 800115c:	2302      	movs	r3, #2
 800115e:	e06e      	b.n	800123e <HAL_UART_Transmit+0x11c>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2221      	movs	r2, #33	; 0x21
 8001172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001176:	f7ff fbc9 	bl	800090c <HAL_GetTick>
 800117a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001190:	d108      	bne.n	80011a4 <HAL_UART_Transmit+0x82>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	e003      	b.n	80011ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80011b4:	e02a      	b.n	800120c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2200      	movs	r2, #0
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f000 faef 	bl	80017a4 <UART_WaitOnFlagUntilTimeout>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e036      	b.n	800123e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10b      	bne.n	80011ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	3302      	adds	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	e007      	b.n	80011fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3301      	adds	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001210:	b29b      	uxth	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1cf      	bne.n	80011b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2200      	movs	r2, #0
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 fabf 	bl	80017a4 <UART_WaitOnFlagUntilTimeout>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e006      	b.n	800123e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2220      	movs	r2, #32
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e000      	b.n	800123e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800123c:	2302      	movs	r3, #2
  }
}
 800123e:	4618      	mov	r0, r3
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b0ba      	sub	sp, #232	; 0xe8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800127a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800128e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <HAL_UART_IRQHandler+0x66>
 800129a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fbc9 	bl	8001a3e <UART_Receive_IT>
      return;
 80012ac:	e256      	b.n	800175c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80012ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80de 	beq.w	8001474 <HAL_UART_IRQHandler+0x22c>
 80012b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80012c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80d1 	beq.w	8001474 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_UART_IRQHandler+0xae>
 80012de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80012f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_UART_IRQHandler+0xd2>
 8001302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f043 0202 	orr.w	r2, r3, #2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800131a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_UART_IRQHandler+0xf6>
 8001326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f043 0204 	orr.w	r2, r3, #4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800133e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d011      	beq.n	800136e <HAL_UART_IRQHandler+0x126>
 800134a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f043 0208 	orr.w	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 81ed 	beq.w	8001752 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_UART_IRQHandler+0x14e>
 8001384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fb54 	bl	8001a3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a0:	2b40      	cmp	r3, #64	; 0x40
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <HAL_UART_IRQHandler+0x17a>
 80013ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d04f      	beq.n	8001462 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fa5c 	bl	8001880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d2:	2b40      	cmp	r3, #64	; 0x40
 80013d4:	d141      	bne.n	800145a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3314      	adds	r3, #20
 80013dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013e4:	e853 3f00 	ldrex	r3, [r3]
 80013e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80013ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3314      	adds	r3, #20
 80013fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001402:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800140a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800140e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001412:	e841 2300 	strex	r3, r2, [r1]
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800141a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1d9      	bne.n	80013d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	2b00      	cmp	r3, #0
 8001428:	d013      	beq.n	8001452 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	4a7d      	ldr	r2, [pc, #500]	; (8001624 <HAL_UART_IRQHandler+0x3dc>)
 8001430:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fc02 	bl	8000c40 <HAL_DMA_Abort_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144c:	4610      	mov	r0, r2
 800144e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001450:	e00e      	b.n	8001470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f990 	bl	8001778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001458:	e00a      	b.n	8001470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f98c 	bl	8001778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001460:	e006      	b.n	8001470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f988 	bl	8001778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800146e:	e170      	b.n	8001752 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001470:	bf00      	nop
    return;
 8001472:	e16e      	b.n	8001752 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	2b01      	cmp	r3, #1
 800147a:	f040 814a 	bne.w	8001712 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800147e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8143 	beq.w	8001712 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800148c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 813c 	beq.w	8001712 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	2b40      	cmp	r3, #64	; 0x40
 80014bc:	f040 80b4 	bne.w	8001628 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80014cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8140 	beq.w	8001756 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80014da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80014de:	429a      	cmp	r2, r3
 80014e0:	f080 8139 	bcs.w	8001756 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80014ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f6:	f000 8088 	beq.w	800160a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001508:	e853 3f00 	ldrex	r3, [r3]
 800150c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	330c      	adds	r3, #12
 8001522:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800152a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800152e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001532:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001536:	e841 2300 	strex	r3, r2, [r1]
 800153a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800153e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1d9      	bne.n	80014fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3314      	adds	r3, #20
 800154c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800154e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001550:	e853 3f00 	ldrex	r3, [r3]
 8001554:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3314      	adds	r3, #20
 8001566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800156a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800156e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001570:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001572:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001576:	e841 2300 	strex	r3, r2, [r1]
 800157a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800157c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1e1      	bne.n	8001546 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3314      	adds	r3, #20
 8001588:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800158a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800158c:	e853 3f00 	ldrex	r3, [r3]
 8001590:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3314      	adds	r3, #20
 80015a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80015a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80015a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80015ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015ae:	e841 2300 	strex	r3, r2, [r1]
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80015b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1e3      	bne.n	8001582 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	330c      	adds	r3, #12
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d2:	e853 3f00 	ldrex	r3, [r3]
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80015d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015da:	f023 0310 	bic.w	r3, r3, #16
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	330c      	adds	r3, #12
 80015e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80015ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80015ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015f4:	e841 2300 	strex	r3, r2, [r1]
 80015f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80015fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e3      	bne.n	80015c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff faab 	bl	8000b60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001612:	b29b      	uxth	r3, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8b6 	bl	800178c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001620:	e099      	b.n	8001756 <HAL_UART_IRQHandler+0x50e>
 8001622:	bf00      	nop
 8001624:	08001947 	.word	0x08001947
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001630:	b29b      	uxth	r3, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800163c:	b29b      	uxth	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 808b 	beq.w	800175a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8086 	beq.w	800175a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	330c      	adds	r3, #12
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001658:	e853 3f00 	ldrex	r3, [r3]
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	330c      	adds	r3, #12
 800166e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001672:	647a      	str	r2, [r7, #68]	; 0x44
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800167a:	e841 2300 	strex	r3, r2, [r1]
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e3      	bne.n	800164e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3314      	adds	r3, #20
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	e853 3f00 	ldrex	r3, [r3]
 8001694:	623b      	str	r3, [r7, #32]
   return(result);
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3314      	adds	r3, #20
 80016a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80016aa:	633a      	str	r2, [r7, #48]	; 0x30
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016b2:	e841 2300 	strex	r3, r2, [r1]
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1e3      	bne.n	8001686 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	330c      	adds	r3, #12
 80016d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	e853 3f00 	ldrex	r3, [r3]
 80016da:	60fb      	str	r3, [r7, #12]
   return(result);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 0310 	bic.w	r3, r3, #16
 80016e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	330c      	adds	r3, #12
 80016ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80016f0:	61fa      	str	r2, [r7, #28]
 80016f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016f4:	69b9      	ldr	r1, [r7, #24]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	e841 2300 	strex	r3, r2, [r1]
 80016fc:	617b      	str	r3, [r7, #20]
   return(result);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e3      	bne.n	80016cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f83e 	bl	800178c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001710:	e023      	b.n	800175a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_UART_IRQHandler+0x4ea>
 800171e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f91f 	bl	800196e <UART_Transmit_IT>
    return;
 8001730:	e014      	b.n	800175c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00e      	beq.n	800175c <HAL_UART_IRQHandler+0x514>
 800173e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f95f 	bl	8001a0e <UART_EndTransmit_IT>
    return;
 8001750:	e004      	b.n	800175c <HAL_UART_IRQHandler+0x514>
    return;
 8001752:	bf00      	nop
 8001754:	e002      	b.n	800175c <HAL_UART_IRQHandler+0x514>
      return;
 8001756:	bf00      	nop
 8001758:	e000      	b.n	800175c <HAL_UART_IRQHandler+0x514>
      return;
 800175a:	bf00      	nop
  }
}
 800175c:	37e8      	adds	r7, #232	; 0xe8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop

08001764 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	; 0x40
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017b4:	e050      	b.n	8001858 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d04c      	beq.n	8001858 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80017c4:	f7ff f8a2 	bl	800090c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d241      	bcs.n	8001858 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	330c      	adds	r3, #12
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	e853 3f00 	ldrex	r3, [r3]
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017f4:	637a      	str	r2, [r7, #52]	; 0x34
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fc:	e841 2300 	strex	r3, r2, [r1]
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e5      	bne.n	80017d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3314      	adds	r3, #20
 800180e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	e853 3f00 	ldrex	r3, [r3]
 8001816:	613b      	str	r3, [r7, #16]
   return(result);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3314      	adds	r3, #20
 8001826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001828:	623a      	str	r2, [r7, #32]
 800182a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800182c:	69f9      	ldr	r1, [r7, #28]
 800182e:	6a3a      	ldr	r2, [r7, #32]
 8001830:	e841 2300 	strex	r3, r2, [r1]
 8001834:	61bb      	str	r3, [r7, #24]
   return(result);
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2220      	movs	r2, #32
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e00f      	b.n	8001878 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4013      	ands	r3, r2
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	429a      	cmp	r2, r3
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	429a      	cmp	r2, r3
 8001874:	d09f      	beq.n	80017b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3740      	adds	r7, #64	; 0x40
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001880:	b480      	push	{r7}
 8001882:	b095      	sub	sp, #84	; 0x54
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	330c      	adds	r3, #12
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	e853 3f00 	ldrex	r3, [r3]
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	330c      	adds	r3, #12
 80018a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a8:	643a      	str	r2, [r7, #64]	; 0x40
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018b0:	e841 2300 	strex	r3, r2, [r1]
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80018b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e5      	bne.n	8001888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3314      	adds	r3, #20
 80018c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	e853 3f00 	ldrex	r3, [r3]
 80018ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3314      	adds	r3, #20
 80018da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e4:	e841 2300 	strex	r3, r2, [r1]
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e5      	bne.n	80018bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d119      	bne.n	800192c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	330c      	adds	r3, #12
 80018fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	e853 3f00 	ldrex	r3, [r3]
 8001906:	60bb      	str	r3, [r7, #8]
   return(result);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f023 0310 	bic.w	r3, r3, #16
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	330c      	adds	r3, #12
 8001916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001918:	61ba      	str	r2, [r7, #24]
 800191a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800191c:	6979      	ldr	r1, [r7, #20]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	e841 2300 	strex	r3, r2, [r1]
 8001924:	613b      	str	r3, [r7, #16]
   return(result);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e5      	bne.n	80018f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
}
 800193a:	bf00      	nop
 800193c:	3754      	adds	r7, #84	; 0x54
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff ff09 	bl	8001778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b21      	cmp	r3, #33	; 0x21
 8001980:	d13e      	bne.n	8001a00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198a:	d114      	bne.n	80019b6 <UART_Transmit_IT+0x48>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d110      	bne.n	80019b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	1c9a      	adds	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	621a      	str	r2, [r3, #32]
 80019b4:	e008      	b.n	80019c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6211      	str	r1, [r2, #32]
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10f      	bne.n	80019fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fe4c 	bl	80006cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08c      	sub	sp, #48	; 0x30
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b22      	cmp	r3, #34	; 0x22
 8001a50:	f040 80ab 	bne.w	8001baa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d117      	bne.n	8001a8e <UART_Receive_IT+0x50>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	1c9a      	adds	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	e026      	b.n	8001adc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	d007      	beq.n	8001ab2 <UART_Receive_IT+0x74>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10a      	bne.n	8001ac0 <UART_Receive_IT+0x82>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e008      	b.n	8001ad2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d15a      	bne.n	8001ba6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0220 	bic.w	r2, r2, #32
 8001afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d135      	bne.n	8001b9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	330c      	adds	r3, #12
 8001b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	e853 3f00 	ldrex	r3, [r3]
 8001b44:	613b      	str	r3, [r7, #16]
   return(result);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f023 0310 	bic.w	r3, r3, #16
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	330c      	adds	r3, #12
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	623a      	str	r2, [r7, #32]
 8001b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5a:	69f9      	ldr	r1, [r7, #28]
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	e841 2300 	strex	r3, r2, [r1]
 8001b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e5      	bne.n	8001b36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d10a      	bne.n	8001b8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fdf9 	bl	800178c <HAL_UARTEx_RxEventCallback>
 8001b9a:	e002      	b.n	8001ba2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fde1 	bl	8001764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e002      	b.n	8001bac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b0c0      	sub	sp, #256	; 0x100
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	ea40 0301 	orr.w	r3, r0, r1
 8001bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c0c:	f021 010c 	bic.w	r1, r1, #12
 8001c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2e:	6999      	ldr	r1, [r3, #24]
 8001c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	ea40 0301 	orr.w	r3, r0, r1
 8001c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <UART_SetConfig+0x2cc>)
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d005      	beq.n	8001c54 <UART_SetConfig+0xa0>
 8001c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b8d      	ldr	r3, [pc, #564]	; (8001e84 <UART_SetConfig+0x2d0>)
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d104      	bne.n	8001c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c54:	f7ff fa04 	bl	8001060 <HAL_RCC_GetPCLK2Freq>
 8001c58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c5c:	e003      	b.n	8001c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c5e:	f7ff f9eb 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 8001c62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c70:	f040 810c 	bne.w	8001e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c86:	4622      	mov	r2, r4
 8001c88:	462b      	mov	r3, r5
 8001c8a:	1891      	adds	r1, r2, r2
 8001c8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c8e:	415b      	adcs	r3, r3
 8001c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c96:	4621      	mov	r1, r4
 8001c98:	eb12 0801 	adds.w	r8, r2, r1
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	eb43 0901 	adc.w	r9, r3, r1
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb6:	4690      	mov	r8, r2
 8001cb8:	4699      	mov	r9, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	eb18 0303 	adds.w	r3, r8, r3
 8001cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	eb49 0303 	adc.w	r3, r9, r3
 8001cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	18db      	adds	r3, r3, r3
 8001ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8001ce8:	4613      	mov	r3, r2
 8001cea:	eb42 0303 	adc.w	r3, r2, r3
 8001cee:	657b      	str	r3, [r7, #84]	; 0x54
 8001cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cf8:	f7fe fa6e 	bl	80001d8 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <UART_SetConfig+0x2d4>)
 8001d02:	fba3 2302 	umull	r2, r3, r3, r2
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	011c      	lsls	r4, r3, #4
 8001d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	464b      	mov	r3, r9
 8001d20:	1891      	adds	r1, r2, r2
 8001d22:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d24:	415b      	adcs	r3, r3
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d32:	4649      	mov	r1, r9
 8001d34:	eb43 0b01 	adc.w	fp, r3, r1
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	469b      	mov	fp, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	eb1a 0303 	adds.w	r3, sl, r3
 8001d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d5a:	464b      	mov	r3, r9
 8001d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	18db      	adds	r3, r3, r3
 8001d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d7e:	4613      	mov	r3, r2
 8001d80:	eb42 0303 	adc.w	r3, r2, r3
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
 8001d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d8e:	f7fe fa23 	bl	80001d8 <__aeabi_uldivmod>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <UART_SetConfig+0x2d4>)
 8001d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	2264      	movs	r2, #100	; 0x64
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	1acb      	subs	r3, r1, r3
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <UART_SetConfig+0x2d4>)
 8001db0:	fba3 2302 	umull	r2, r3, r3, r2
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dbc:	441c      	add	r4, r3
 8001dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	1891      	adds	r1, r2, r2
 8001dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dd8:	415b      	adcs	r3, r3
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001de0:	4641      	mov	r1, r8
 8001de2:	1851      	adds	r1, r2, r1
 8001de4:	6339      	str	r1, [r7, #48]	; 0x30
 8001de6:	4649      	mov	r1, r9
 8001de8:	414b      	adcs	r3, r1
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001df8:	4659      	mov	r1, fp
 8001dfa:	00cb      	lsls	r3, r1, #3
 8001dfc:	4651      	mov	r1, sl
 8001dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e02:	4651      	mov	r1, sl
 8001e04:	00ca      	lsls	r2, r1, #3
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4642      	mov	r2, r8
 8001e0e:	189b      	adds	r3, r3, r2
 8001e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e14:	464b      	mov	r3, r9
 8001e16:	460a      	mov	r2, r1
 8001e18:	eb42 0303 	adc.w	r3, r2, r3
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e34:	460b      	mov	r3, r1
 8001e36:	18db      	adds	r3, r3, r3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	eb42 0303 	adc.w	r3, r2, r3
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e4a:	f7fe f9c5 	bl	80001d8 <__aeabi_uldivmod>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <UART_SetConfig+0x2d4>)
 8001e54:	fba3 1302 	umull	r1, r3, r3, r2
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	2164      	movs	r1, #100	; 0x64
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	3332      	adds	r3, #50	; 0x32
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <UART_SetConfig+0x2d4>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	f003 0207 	and.w	r2, r3, #7
 8001e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4422      	add	r2, r4
 8001e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e7c:	e105      	b.n	800208a <UART_SetConfig+0x4d6>
 8001e7e:	bf00      	nop
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40011400 	.word	0x40011400
 8001e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	1891      	adds	r1, r2, r2
 8001ea4:	6239      	str	r1, [r7, #32]
 8001ea6:	415b      	adcs	r3, r3
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eae:	4641      	mov	r1, r8
 8001eb0:	1854      	adds	r4, r2, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	eb43 0501 	adc.w	r5, r3, r1
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	00eb      	lsls	r3, r5, #3
 8001ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ed4:	464b      	mov	r3, r9
 8001ed6:	eb45 0303 	adc.w	r3, r5, r3
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001eea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001efa:	4629      	mov	r1, r5
 8001efc:	008b      	lsls	r3, r1, #2
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f04:	4621      	mov	r1, r4
 8001f06:	008a      	lsls	r2, r1, #2
 8001f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f0c:	f7fe f964 	bl	80001d8 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <UART_SetConfig+0x4e4>)
 8001f16:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	011c      	lsls	r4, r3, #4
 8001f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f30:	4642      	mov	r2, r8
 8001f32:	464b      	mov	r3, r9
 8001f34:	1891      	adds	r1, r2, r2
 8001f36:	61b9      	str	r1, [r7, #24]
 8001f38:	415b      	adcs	r3, r3
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f40:	4641      	mov	r1, r8
 8001f42:	1851      	adds	r1, r2, r1
 8001f44:	6139      	str	r1, [r7, #16]
 8001f46:	4649      	mov	r1, r9
 8001f48:	414b      	adcs	r3, r1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f58:	4659      	mov	r1, fp
 8001f5a:	00cb      	lsls	r3, r1, #3
 8001f5c:	4651      	mov	r1, sl
 8001f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f62:	4651      	mov	r1, sl
 8001f64:	00ca      	lsls	r2, r1, #3
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f74:	464b      	mov	r3, r9
 8001f76:	460a      	mov	r2, r1
 8001f78:	eb42 0303 	adc.w	r3, r2, r3
 8001f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f98:	4649      	mov	r1, r9
 8001f9a:	008b      	lsls	r3, r1, #2
 8001f9c:	4641      	mov	r1, r8
 8001f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	008a      	lsls	r2, r1, #2
 8001fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001faa:	f7fe f915 	bl	80001d8 <__aeabi_uldivmod>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <UART_SetConfig+0x4e4>)
 8001fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb8:	095b      	lsrs	r3, r3, #5
 8001fba:	2164      	movs	r1, #100	; 0x64
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	3332      	adds	r3, #50	; 0x32
 8001fc6:	4a34      	ldr	r2, [pc, #208]	; (8002098 <UART_SetConfig+0x4e4>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	095b      	lsrs	r3, r3, #5
 8001fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd2:	441c      	add	r4, r3
 8001fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd8:	2200      	movs	r2, #0
 8001fda:	673b      	str	r3, [r7, #112]	; 0x70
 8001fdc:	677a      	str	r2, [r7, #116]	; 0x74
 8001fde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fe2:	4642      	mov	r2, r8
 8001fe4:	464b      	mov	r3, r9
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	415b      	adcs	r3, r3
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff2:	4641      	mov	r1, r8
 8001ff4:	1851      	adds	r1, r2, r1
 8001ff6:	6039      	str	r1, [r7, #0]
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	414b      	adcs	r3, r1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800200a:	4659      	mov	r1, fp
 800200c:	00cb      	lsls	r3, r1, #3
 800200e:	4651      	mov	r1, sl
 8002010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002014:	4651      	mov	r1, sl
 8002016:	00ca      	lsls	r2, r1, #3
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	4603      	mov	r3, r0
 800201e:	4642      	mov	r2, r8
 8002020:	189b      	adds	r3, r3, r2
 8002022:	66bb      	str	r3, [r7, #104]	; 0x68
 8002024:	464b      	mov	r3, r9
 8002026:	460a      	mov	r2, r1
 8002028:	eb42 0303 	adc.w	r3, r2, r3
 800202c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	663b      	str	r3, [r7, #96]	; 0x60
 8002038:	667a      	str	r2, [r7, #100]	; 0x64
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002046:	4649      	mov	r1, r9
 8002048:	008b      	lsls	r3, r1, #2
 800204a:	4641      	mov	r1, r8
 800204c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002050:	4641      	mov	r1, r8
 8002052:	008a      	lsls	r2, r1, #2
 8002054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002058:	f7fe f8be 	bl	80001d8 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <UART_SetConfig+0x4e4>)
 8002062:	fba3 1302 	umull	r1, r3, r3, r2
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2164      	movs	r1, #100	; 0x64
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	3332      	adds	r3, #50	; 0x32
 8002074:	4a08      	ldr	r2, [pc, #32]	; (8002098 <UART_SetConfig+0x4e4>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4422      	add	r2, r4
 8002088:	609a      	str	r2, [r3, #8]
}
 800208a:	bf00      	nop
 800208c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002096:	bf00      	nop
 8002098:	51eb851f 	.word	0x51eb851f

0800209c <__libc_init_array>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	4d0d      	ldr	r5, [pc, #52]	; (80020d4 <__libc_init_array+0x38>)
 80020a0:	4c0d      	ldr	r4, [pc, #52]	; (80020d8 <__libc_init_array+0x3c>)
 80020a2:	1b64      	subs	r4, r4, r5
 80020a4:	10a4      	asrs	r4, r4, #2
 80020a6:	2600      	movs	r6, #0
 80020a8:	42a6      	cmp	r6, r4
 80020aa:	d109      	bne.n	80020c0 <__libc_init_array+0x24>
 80020ac:	4d0b      	ldr	r5, [pc, #44]	; (80020dc <__libc_init_array+0x40>)
 80020ae:	4c0c      	ldr	r4, [pc, #48]	; (80020e0 <__libc_init_array+0x44>)
 80020b0:	f000 f818 	bl	80020e4 <_init>
 80020b4:	1b64      	subs	r4, r4, r5
 80020b6:	10a4      	asrs	r4, r4, #2
 80020b8:	2600      	movs	r6, #0
 80020ba:	42a6      	cmp	r6, r4
 80020bc:	d105      	bne.n	80020ca <__libc_init_array+0x2e>
 80020be:	bd70      	pop	{r4, r5, r6, pc}
 80020c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c4:	4798      	blx	r3
 80020c6:	3601      	adds	r6, #1
 80020c8:	e7ee      	b.n	80020a8 <__libc_init_array+0xc>
 80020ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ce:	4798      	blx	r3
 80020d0:	3601      	adds	r6, #1
 80020d2:	e7f2      	b.n	80020ba <__libc_init_array+0x1e>
 80020d4:	0800210c 	.word	0x0800210c
 80020d8:	0800210c 	.word	0x0800210c
 80020dc:	0800210c 	.word	0x0800210c
 80020e0:	08002110 	.word	0x08002110

080020e4 <_init>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr

080020f0 <_fini>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr
